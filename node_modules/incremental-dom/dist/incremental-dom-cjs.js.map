{"version":3,"sources":["incremental-dom-cjs.js","src/assertions.js","src/notifications.js","src/context.js","src/util.js","src/node_data.js","src/symbols.js","src/attributes.js","src/nodes.js","src/core.js","src/virtual_elements.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACIb,IAAI,YAAY,GAAG,KAAK,CAAC;;;;;;AAOzB,IAAI,aAAa,GAAG,UAAS,OAAO,EAAE;AACpC,MAAI,CAAC,OAAO,EAAE;AACZ,UAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;GACjE;CACF,CAAC;;;;;;;;AASF,IAAI,qBAAqB,GAAG,UAAS,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE;AACvD,MAAI,QAAQ,KAAK,GAAG,EAAE;AACpB,UAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,GAAG,GAAG,YAAY,GAChE,GAAG,GAAG,UAAU,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;GACxC;CACF,CAAC;;;;;;;AAQF,IAAI,oBAAoB,GAAG,UAAS,WAAW,EAAE,IAAI,EAAE;AACrD,MAAI,WAAW,KAAK,IAAI,EAAE;AACxB,WAAO;GACR;;AAED,MAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,SAAO,WAAW,IAAI,WAAW,KAAK,IAAI,EAAE;AAC1C,YAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAClD,eAAW,GAAG,WAAW,CAAC,UAAU,CAAC;GACtC;;AAED,QAAM,IAAI,KAAK,CAAC,qCAAqC,GACjD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;CAC1B,CAAC;;;;;;AAOF,IAAI,qBAAqB,GAAG,UAAS,YAAY,EAAE;AACjD,MAAI,YAAY,EAAE;AAChB,UAAM,IAAI,KAAK,CAAC,YAAY,GAAG,+BAA+B,GAC1D,0CAA0C,CAAC,CAAC;GACjD;CACF,CAAC;;;;;;AAOF,IAAI,kBAAkB,GAAG,UAAS,YAAY,EAAE;AAC9C,MAAI,CAAC,YAAY,EAAE;AACjB,UAAM,IAAI,KAAK,CAAC,YAAY,GAAG,0BAA0B,GACrD,qBAAqB,CAAC,CAAC;GAC5B;CACF,CAAC;;;;;AAMF,IAAI,6BAA6B,GAAG,YAAW;AAC7C,MAAI,YAAY,EAAE;AAChB,UAAM,IAAI,KAAK,CAAC,gDAAgD,GAC5D,qBAAqB,CAAC,CAAC;GAC5B;CACF,CAAC;;;;;;;;AASF,IAAI,6BAA6B,GAAG,UAAS,GAAG,EAAE;AAChD,MAAI,CAAC,GAAG,EAAE;AACR,UAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;GACpE;CACF,CAAC;;;;;;;AAQF,IAAI,yBAAyB,GAAG,UAAS,QAAQ,EAAE,GAAG,EAAE;AACtD,MAAI,QAAQ,KAAK,GAAG,EAAE;AACpB,UAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,GAAG,GAAG,OAAO,GACvD,QAAQ,GAAG,YAAY,CAAC,CAAC;GAC9B;CACF,CAAC;;;;;;AAOF,IAAI,eAAe,GAAG,UAAS,KAAK,EAAE;AACpC,cAAY,GAAG,KAAK,CAAC;CACtB,CAAA;;;;;;;;;;;;;;;;;;;AC1ID,OAAA,CAAA,aAiBiB,GAAG;;;;;;AAMlB,cAAY,EAAE,IAAI;;;;;;;;AAQlB,cAAY,EAAE,IAAI;CACnB,CAAA;;;;;;ACTD,SAAS,OAAO,GAAG;;;;AAIjB,MAAI,CAAC,OAAO,GA3Bd,OAAA,CAAA,aA2B8B,CAAC,YAAY,IAAI,EAAE,CAAC;;;;;AAKhD,MAAI,CAAC,OAAO,GAhCd,OAAA,CAAA,aAgC8B,CAAC,YAAY,IAAI,EAAE,CAAC;CACjD;;;;;AAMD,OAAO,CAAC,SAAS,CAAC,WAAW,GAAG,UAAS,IAAI,EAAE;AAC7C,MAAI,IAAI,CAAC,OAAO,EAAE;AAChB,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACzB;CACF,CAAC;;;;;AAMF,OAAO,CAAC,SAAS,CAAC,WAAW,GAAG,UAAS,IAAI,EAAE;AAC7C,MAAI,IAAI,CAAC,OAAO,EAAE;AAChB,QAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACzB;CACF,CAAC;;;;;AAMF,OAAO,CAAC,SAAS,CAAC,aAAa,GAAG,YAAW;AAC3C,MAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AA5D/C,WAAA,CAAA,aA6DiB,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC1C;;AAED,MAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AAhE/C,WAAA,CAAA,aAiEiB,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GAC1C;CACF,CAAA;;;;;;;;;;;;;;;;;;;;;AC/CD,IAAI,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;;;;;AAMrD,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;;;;;;;;AAS3B,IAAI,GAAG,GAAG,UAAS,GAAG,EAAE,QAAQ,EAAE;AAChC,SAAO,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;CAC3C,CAAC;;;;;;AAOF,IAAI,SAAS,GAAG,YAAW;AACzB,SAAO,MAAM,CAAC,IAAI,CAAC,CAAC;CACrB,CAAA;;;;;;;;ACrBD,SAAS,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;;;;;AAK/B,MAAI,CAAC,KAAK,GAAG,SAAS,EAAE,CAAC;;;;;;;;AAQzB,MAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;;;;;AAMnB,MAAI,CAAC,QAAQ,GAAG,SAAS,EAAE,CAAC;;;;;;;AAO5B,MAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;;;;;AAMf,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;;;;;AAMnB,MAAI,CAAC,WAAW,GAAG,IAAI,CAAC;;;;;;AAMxB,MAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;;;;AAKzB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;CAClB;;;;;;;;;;AAWD,IAAI,QAAQ,GAAG,UAAS,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE;AAC3C,MAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AACvC,MAAI,CAAC,sBAAsB,CAAC,GAAG,IAAI,CAAC;AACpC,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;AASF,IAAI,OAAO,GAAG,UAAS,IAAI,EAAE;AAC3B,MAAI,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC;;AAExC,MAAI,CAAC,IAAI,EAAE;AACT,QAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;AAC3C,QAAI,GAAG,GAAG,IAAI,CAAC;;AAEf,QAAI,IAAI,YAAY,OAAO,EAAE;AAC3B,SAAG,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAChC;;AAED,QAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;GACtC;;AAED,SAAO,IAAI,CAAC;CACb,CAAA;;;;;;;;;;;;;;;;;;AClHD,OAAA,CAAA,OAgBW,GAAG;AACZ,SAAO,EAAE,WAAW;;AAEpB,aAAW,EAAE,eAAe;CAC7B,CAAA;;;;;;;;;;ACpBD,OAAA,CAAA,SAgCa,GAAG,UAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;AACxC,MAAI,KAAK,IAAI,IAAI,EAAE;AACjB,MAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;GAC1B,MAAM;AACL,MAAE,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;GAC9B;CACF,CAAC;;;;;;;;AAtCF,OAAA,CAAA,SA8Ca,GAAG,UAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;AACxC,IAAE,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;CAClB,CAAC;;;;;;;;;;AAWF,IAAI,UAAU,GAAG,UAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;AACzC,MAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC7B,MAAE,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;GAC1B,MAAM;AACL,MAAE,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AACtB,QAAI,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC;;AAEvB,SAAK,IAAI,IAAI,IAAI,KAAK,EAAE;AACtB,UAAI,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;AACpB,eAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;OAC7B;KACF;GACF;CACF,CAAC;;;;;;;;;;AAWF,IAAI,mBAAmB,GAAG,UAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;AAClD,MAAI,IAAI,GAAG,OAAO,KAAK,CAAC;;AAExB,MAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,UAAU,EAAE;AAtFhD,WAAA,CAAA,SAuFa,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;GAC5B,MAAM;AAxFT,WAAA,CAAA,SAyFa,CAAC,EAAE,EAAE,IAAI,yCAA0C,KAAK,CAAE,CAAC;GACrE;CACF,CAAC;;;;;;;;AASF,IAAI,eAAe,GAAG,UAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;AAC9C,MAAI,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;AACvB,MAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;;AAEvB,MAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE;AACzB,WAAO;GACR;;AAED,MAAI,OAAO,GA5Gb,OAAA,CAAA,UA4G0B,CAAC,IAAI,CAAC,IA5GhC,OAAA,CAAA,UA4G8C,CA5G9C,OAAA,CAAA,OA4GsD,CAAC,OAAO,CAAC,CAAC;AAC9D,SAAO,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;;AAEzB,OAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;CACrB,CAAC;;;;;;AAhHF,OAAA,CAAA,UAuHc,GAAG,SAAS,EAAE,CAAC;;;;AAvH7B,OAAA,CAAA,UA2HU,CA3HV,OAAA,CAAA,OA2HkB,CAAC,OAAO,CAAC,GAAG,mBAAmB,CAAC;;AA3HlD,OAAA,CAAA,UA6HU,CA7HV,OAAA,CAAA,OA6HkB,CAAC,WAAW,CAAC,GAAG,YAAW,EAAE,CAAC;;AA7HhD,OAAA,CAAA,UA+HU,CAAC,OAAO,CAAC,GAAG,UAAU,CAAA;;;;;;;;ACjGhC,IAAI,kBAAkB,GAAG,UAAS,GAAG,EAAE,MAAM,EAAE;AAC7C,MAAI,GAAG,KAAK,KAAK,EAAE;AACjB,WAAO,4BAA4B,CAAC;GACrC;;AAED,MAAI,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,KAAK,eAAe,EAAE;AAChD,WAAO,IAAI,CAAC;GACb;;AAED,SAAO,MAAM,CAAC,YAAY,CAAC;CAC5B,CAAC;;;;;;;;;;AAWF,IAAI,aAAa,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE;AAClD,MAAI,SAAS,GAAG,kBAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAChD,MAAI,EAAE,CAAC;;AAEP,MAAI,SAAS,EAAE;AACb,MAAE,GAAG,GAAG,CAAC,eAAe,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;GAC1C,MAAM;AACL,MAAE,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;GAC7B;;AAED,SAAO,EAAE,CAAC;CACX,CAAC;;;;;;;;;;;;;;;AAgBF,IAAI,UAAU,GAAG,UAAS,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE;AAC7D,MAAI,IAAI,CAAC;AACT,MAAI,QAAQ,KAAK,OAAO,EAAE;AACxB,QAAI,GAAG,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/B,MAAM;AACL,QAAI,GAAG,aAAa,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;GAClD;;AAED,UAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;;AAE9B,MAAI,OAAO,EAAE;AACX,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC1C,qBAAe,wBAAwB,IAAI;2BACL,OAAO,CAAC,CAAC,CAAC,EAChC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACjC;GACF;;AAED,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;AASF,IAAI,YAAY,GAAG,UAAS,EAAE,EAAE;AAC9B,MAAI,GAAG,GAAG,SAAS,EAAE,CAAC;AACtB,MAAI,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;AAC3B,MAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;;AAE5B,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE;AACjC,QAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxB,QAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;;AAE7B,QAAI,GAAG,EAAE;AACP,SAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KAClB;GACF;;AAED,SAAO,GAAG,CAAC;CACZ,CAAC;;;;;;;;AASF,IAAI,SAAS,GAAG,UAAS,EAAE,EAAE;AAC3B,MAAI,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;;AAEvB,MAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AAChB,QAAI,CAAC,MAAM,GAAG,YAAY,CAAC,EAAE,CAAC,CAAC;GAChC;;AAED,SAAO,IAAI,CAAC,MAAM,CAAC;CACpB,CAAC;;;;;;;;AASF,IAAI,QAAQ,GAAG,UAAS,MAAM,EAAE,GAAG,EAAE;AACnC,SAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;CAC/B,CAAC;;;;;;;;;;AAWF,IAAI,aAAa,GAAG,UAAS,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE;AAC/C,WAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;CAChC,CAAA;;;AC9HD,IAAI,OAAO,GAAG,IAAI,CAAC;;;AAGnB,IAAI,WAAW,CAAC;;;AAGhB,IAAI,aAAa,CAAC;;;AAGlB,IAAI,YAAY,CAAC;;;AAGjB,IAAI,IAAI,CAAC;;;AAGT,IAAI,GAAG,CAAC;;;;;;;;;;;;AAnDR,OAAA,CAAA,KAgES,GAAG,UAAS,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE;AACnC,MAAI,WAAW,GAAG,OAAO,CAAC;AAC1B,MAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,MAAI,OAAO,GAAG,GAAG,CAAC;AAClB,MAAI,eAAe,GAAG,WAAW,CAAC;AAClC,MAAI,iBAAiB,GAAG,aAAa,CAAC;AACtC,MAAI,gBAAgB,GAAG,YAAY,CAAC;;AAEpC,SAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5B,MAAI,GAAG,IAAI,CAAC;AACZ,KAAG,GAAG,IAAI,CAAC,aAAa,CAAC;AACzB,aAAW,GAAG,IAAI,CAAC;AACnB,eAAa,GAAG,IAAI,CAAC;AACrB,cAAY,GAAG,IAAI,CAAC;;AAEpB,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,mBAAe,CAAC,KAAK,CAAC,CAAC;GACxB;;AAED,WAAS,EAAE,CAAC;AACZ,IAAE,CAAC,IAAI,CAAC,CAAC;AACT,UAAQ,EAAE,CAAC;;AAEX,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,iCAA6B,EAAE,CAAC;AAChC,wBAAoB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;GAC1C;;AAED,SAAO,CAAC,aAAa,EAAE,CAAC;;AAExB,SAAO,GAAG,WAAW,CAAC;AACtB,MAAI,GAAG,QAAQ,CAAC;AAChB,KAAG,GAAG,OAAO,CAAC;AACd,aAAW,GAAG,eAAe,CAAC;AAC9B,eAAa,GAAG,iBAAiB,CAAC;AAClC,cAAY,GAAG,gBAAgB,CAAC;CACjC,CAAC;;;;;;;;;;AAWF,IAAI,OAAO,GAAG,UAAS,QAAQ,EAAE,GAAG,EAAE;AACpC,MAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;;;;AAKhC,SAAO,QAAQ,KAAK,IAAI,CAAC,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC;CACtD,CAAC;;;;;;;;;;;AAYF,IAAI,YAAY,GAAG,UAAS,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE;AAClD,MAAI,WAAW,IAAI,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;AACzC,WAAO;GACR;;AAED,MAAI,IAAI,CAAC;;;AAGT,MAAI,GAAG,EAAE;AACP,QAAI,GAAG,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;AACpC,QAAI,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACjD,2BAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC9D;GACF;;;AAGD,MAAI,CAAC,IAAI,EAAE;AACT,QAAI,GAAG,UAAU,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;;AAE9D,QAAI,GAAG,EAAE;AACP,mBAAa,CAAC,aAAa,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACzC;;AAED,WAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;GAC3B;;;;;;AAMD,MAAI,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE;AAC3C,iBAAa,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC9C,WAAO,CAAC,aAAa,CAAC,CAAC,WAAW,GAAG,KAAK,CAAC;GAC5C,MAAM;AACL,iBAAa,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;GAC/C;;AAED,aAAW,GAAG,IAAI,CAAC;CACpB,CAAC;;;;;;AAOF,IAAI,iBAAiB,GAAG,YAAW;AACjC,MAAI,IAAI,GAAG,aAAa,CAAC;AACzB,MAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,MAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACnC,MAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;AAC3B,MAAI,GAAG,CAAC;;AAER,MAAI,KAAK,KAAK,YAAY,IAAI,WAAW,EAAE;AACzC,WAAO;GACR;;AAED,MAAI,IAAI,CAAC,KAAK,CA3LhB,OAAA,CAAA,OA2LwB,CAAC,WAAW,CAAC,IAAI,IAAI,KAAK,IAAI,EAAE;AACpD,WAAO;GACR;;AAED,SAAO,KAAK,KAAK,YAAY,EAAE;AAC7B,QAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxB,WAAO,CAAC,WAAW,qBAAqB,KAAK,CAAE,CAAC;;AAEhD,OAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;AACzB,QAAI,GAAG,EAAE;AACP,aAAO,MAAM,CAAC,GAAG,CAAC,CAAC;KACpB;AACD,SAAK,GAAG,IAAI,CAAC,SAAS,CAAC;GACxB;;;AAGD,MAAI,CAAC,WAAW,EAAE;AAChB,SAAK,GAAG,IAAI,MAAM,EAAE;AAClB,WAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACpB,UAAI,KAAK,CAAC,UAAU,KAAK,IAAI,EAAE;AAC7B,eAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3B,eAAO,MAAM,CAAC,GAAG,CAAC,CAAC;OACpB;KACF;;AAED,QAAI,CAAC,WAAW,GAAG,IAAI,CAAC;GACzB;CACF,CAAC;;;;;AAMF,IAAI,SAAS,GAAG,YAAW;AACzB,eAAa,GAAG,WAAW,CAAC;AAC5B,aAAW,GAAG,WAAW,CAAC,UAAU,CAAC;AACrC,cAAY,GAAG,IAAI,CAAC;CACrB,CAAC;;;;;AAMF,IAAI,QAAQ,GAAG,YAAW;AACxB,cAAY,GAAG,WAAW,CAAC;AAC3B,aAAW,GAAG,WAAW,CAAC,WAAW,CAAC;CACvC,CAAC;;;;;AAMF,IAAI,QAAQ,GAAG,YAAW;AACxB,mBAAiB,EAAE,CAAC;;AAEpB,cAAY,GAAG,aAAa,CAAC;AAC7B,aAAW,GAAG,aAAa,CAAC,WAAW,CAAC;AACxC,eAAa,GAAG,aAAa,CAAC,UAAU,CAAC;CAC1C,CAAC;;;;;;;;;;;;;;;AAgBF,IArQA,YAqQe,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE;AAC5C,cAAY,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAChC,WAAS,EAAE,CAAC;AACZ,iCAA+B,aAAa;IAAE;CAC/C,CAAC;;;;;;;;AASF,IAlRA,aAkRgB,GAAG,YAAW;AAC5B,UAAQ,EAAE,CAAC;AACX,iCAA+B,YAAY;IAAE;CAC9C,CAAC;;;;;;;;AASF,IA9RA,KA8RQ,GAAG,YAAW;AACpB,cAAY,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAClC,UAAQ,EAAE,CAAC;AACX,8BAA4B,YAAY;IAAE;CAC3C,CAAC;;;;;;AAlSF,OAAA,CAAA,cAySkB,GAAG,YAAW;AAC9B,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,iBAAa,CAAC,OAAO,CAAC,CAAC;AACvB,yBAAqB,CAAC,gBAAgB,CAAC,CAAC;GACzC;AACD,iCAA+B,aAAa;IAAE;CAC/C,CAAC;;;;;;AA/SF,OAAA,CAAA,IAsTQ,GAAG,YAAW;AACpB,cAAY,GAAG,aAAa,CAAC,SAAS,CAAC;CACxC,CAAA;;;;;;;AChRD,IAAI,iBAAiB,GAAG,CAAC,CAAC;;;;;;;AAQ1B,IAAI,WAAW,GAAG,EAAE,CAAC;;;;;;;;;;;;;;AAhDrB,OAAA,CAAA,WA+De,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AACtD,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,yBAAqB,CAAC,aAAa,CAAC,CAAC;GACtC;;AAED,MAAI,IAAI,GApEV,YAoE4B,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAC9C,MAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;;AAQzB,MAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC7B,MAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC7B,MAAI,YAAY,GAAG,KAAK,CAAC;AACzB,MAAI,CAAC,GAAG,iBAAiB,CAAC;AAC1B,MAAI,CAAC,GAAG,CAAC,CAAC;;AAEV,SAAO,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;AAC3C,QAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE;AAChC,kBAAY,GAAG,IAAI,CAAC;AACpB,YAAM;KACP;GACF;;AAED,SAAO,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;AAC3C,YAAQ,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;GAC5B;;AAED,MAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;AACvB,gBAAY,GAAG,IAAI,CAAC;AACpB,YAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;GACrB;;;;;AAKD,MAAI,YAAY,EAAE;AAChB,SAAK,CAAC,GAAG,iBAAiB,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AACxD,cAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC3C;;AAED,SAAK,IAAI,IAAI,IAAI,QAAQ,EAAE;AACzB,qBAAe,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5C,cAAQ,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;KAC5B;GACF;;AAED,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;;;;;;;;;AAlHF,OAAA,CAAA,gBAmIoB,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE;AACjD,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,yBAAqB,CAAC,kBAAkB,CAAC,CAAC;AAC1C,mBAAe,CAAC,IAAI,CAAC,CAAC;GACvB;;AAED,aAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACrB,aAAW,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACrB,aAAW,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;CAC1B,CAAC;;;;;;;;;AA5IF,OAAA,CAAA,IAsJQ,GAAG,UAAS,IAAI,EAAE,KAAK,EAAE;AAC/B,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,sBAAkB,CAAC,MAAM,CAAC,CAAC;GAC5B;;AAED,aAAW,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CAC/B,CAAC;;;;;;AA5JF,OAAA,CAAA,cAmKkB,GAAG,YAAW;AAC9B,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,sBAAkB,CAAC,gBAAgB,CAAC,CAAC;AACrC,mBAAe,CAAC,KAAK,CAAC,CAAC;GACxB;;AAED,MAAI,IAAI,GAzKV,OAAA,CAAA,WAyKwB,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAChD,aAAW,CAAC,MAAM,GAAG,CAAC,CAAC;AACvB,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;AA5KF,OAAA,CAAA,YAqLgB,GAAG,UAAS,GAAG,EAAE;AAC/B,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,yBAAqB,CAAC,cAAc,CAAC,CAAC;GACvC;;AAED,MAAI,IAAI,GA1LV,aA0L6B,EAAE,CAAC;;AAE9B,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,6BAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;GACxD;;AAED,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;;;;;;;;;AAjMF,OAAA,CAAA,WAkNe,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AACtD,MAAI,IAAI,GAnNV,OAAA,CAAA,WAmNwB,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAnNhD,SAAA,CAAA,YAoNc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACpC,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;;;;;;;;;;;;AAtNF,OAAA,CAAA,kBA0OsB,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC7D,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,iCAA6B,CAAC,GAAG,CAAC,CAAC;GACpC;;AA7OH,SAAA,CAAA,WA+Oa,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AA/OrC,SAAA,CAAA,IAgPM,EAAE,CAAC;AACP,SAjPF,OAAA,CAAA,YAiPqB,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;CAC5C,CAAC;;;;;;;;;;;AAlPF,OAAA,CAAA,IA8PQ,GAAG,UAAS,KAAK,EAAE,QAAQ,EAAE;AACnC,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,yBAAqB,CAAC,MAAM,CAAC,CAAC;GAC/B;;AAED,MAAI,IAAI,GAnQV,KAmQqB,EAAE,CAAC;AACtB,MAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEzB,MAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;AACvB,QAAI,CAAC,IAAI,wBAAyB,KAAK,AAAC,CAAC;;AAEzC,QAAI,SAAS,GAAG,KAAK,CAAC;AACtB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC5C,eAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;KACrC;;AAED,QAAI,CAAC,IAAI,GAAG,SAAS,CAAC;GACvB;;AAED,SAAO,IAAI,CAAC;CACb,CAAA","file":"incremental-dom-cjs.js","sourcesContent":["\r\n/**\r\n * @license\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\n'use strict';\n\n/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/**\r\n  * Keeps track whether or not we are in an attributes declaration (after\r\n  * elementOpenStart, but before elementOpenEnd).\r\n  * @type {boolean}\r\n  */\r\nvar inAttributes = false;\r\n\r\n\r\n/**\r\n * Makes sure that there is a current patch context.\r\n * @param {*} context\r\n */\r\nvar assertInPatch = function(context) {\r\n  if (!context) {\r\n    throw new Error('Cannot call currentElement() unless in patch');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n* Makes sure that keyed Element matches the tag name provided.\r\n* @param {!Element} nodeName The nodeName of the node that is being matched.\r\n* @param {string=} tag The tag name of the Element.\r\n* @param {?string=} key The key of the Element.\r\n*/\r\nvar assertKeyedTagMatches = function(nodeName, tag, key) {\r\n  if (nodeName !== tag) {\r\n    throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\r\n        tag + ', not a ' + nodeName + '.');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that a patch closes every node that it opened.\r\n * @param {!Node} openElement\r\n * @param {!Node|!DocumentFragment} root\r\n */\r\nvar assertNoUnclosedTags = function(openElement, root) {\r\n  if (openElement === root) {\r\n    return;\r\n  }\r\n\r\n  var openTags = [];\r\n  while (openElement && openElement !== root) {\r\n    openTags.push(openElement.nodeName.toLowerCase());\r\n    openElement = openElement.parentNode;\r\n  }\r\n\r\n  throw new Error('One or more tags were not closed:\\n' +\r\n      openTags.join('\\n'));\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the caller is not where attributes are expected.\r\n * @param {string} functionName\r\n */\r\nvar assertNotInAttributes = function(functionName) {\r\n  if (inAttributes) {\r\n    throw new Error(functionName + '() may not be called between ' +\r\n        'elementOpenStart() and elementOpenEnd().');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the caller is where attributes are expected.\r\n * @param {string} functionName\r\n */\r\nvar assertInAttributes = function(functionName) {\r\n  if (!inAttributes) {\r\n    throw new Error(functionName + '() must be called after ' +\r\n        'elementOpenStart().');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Makes sure the patch closes virtual attributes call\r\n */\r\nvar assertVirtualAttributesClosed = function() {\r\n  if (inAttributes) {\r\n    throw new Error('elementOpenEnd() must be called after calling ' +\r\n        'elementOpenStart().');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n  * Makes sure that placeholders have a key specified. Otherwise, conditional\r\n  * placeholders and conditional elements next to placeholders will cause\r\n  * placeholder elements to be re-used as non-placeholders and vice versa.\r\n  * @param {string} key\r\n  */\r\nvar assertPlaceholderKeySpecified = function(key) {\r\n  if (!key) {\r\n    throw new Error('Placeholder elements must have a key specified.');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n  * Makes sure that tags are correctly nested.\r\n  * @param {string} nodeName\r\n  * @param {string} tag\r\n  */\r\nvar assertCloseMatchesOpenTag = function(nodeName, tag) {\r\n  if (nodeName !== tag) {\r\n    throw new Error('Received a call to close ' + tag + ' but ' +\r\n        nodeName + ' was open.');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Updates the state to being in an attribute declaration.\r\n * @param {boolean} value\r\n */\r\nvar setInAttributes = function(value) {\r\n  inAttributes = value;\r\n};\n\n/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** */\r\nexports.notifications = {\r\n  /**\r\n   * Called after patch has compleated with any Nodes that have been created\r\n   * and added to the DOM.\r\n   * @type {?function(Array<!Node>)}\r\n   */\r\n  nodesCreated: null,\r\n\r\n  /**\r\n   * Called after patch has compleated with any Nodes that have been removed\r\n   * from the DOM.\r\n   * Note it's an applications responsibility to handle any childNodes.\r\n   * @type {?function(Array<!Node>)}\r\n   */\r\n  nodesDeleted: null\r\n};\n\n/**\r\n * Keeps track of the state of a patch.\r\n * @constructor\r\n */\r\nfunction Context() {\r\n  /**\r\n   * @type {(Array<!Node>|undefined)}\r\n   */\r\n  this.created = exports.notifications.nodesCreated && [];\r\n\r\n  /**\r\n   * @type {(Array<!Node>|undefined)}\r\n   */\r\n  this.deleted = exports.notifications.nodesDeleted && [];\r\n}\r\n\r\n\r\n/**\r\n * @param {!Node} node\r\n */\r\nContext.prototype.markCreated = function(node) {\r\n  if (this.created) {\r\n    this.created.push(node);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @param {!Node} node\r\n */\r\nContext.prototype.markDeleted = function(node) {\r\n  if (this.deleted) {\r\n    this.deleted.push(node);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Notifies about nodes that were created during the patch opearation.\r\n */\r\nContext.prototype.notifyChanges = function() {\r\n  if (this.created && this.created.length > 0) {\r\n    exports.notifications.nodesCreated(this.created);\r\n  }\r\n\r\n  if (this.deleted && this.deleted.length > 0) {\r\n    exports.notifications.nodesDeleted(this.deleted);\r\n  }\r\n};\n\n/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/**\r\n * A cached reference to the hasOwnProperty function.\r\n */\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n\r\n/**\r\n * A cached reference to the create function.\r\n */\r\nvar create = Object.create;\r\n\r\n\r\n/**\r\n * Used to prevent property collisions between our \"map\" and its prototype.\r\n * @param {!Object<string, *>} map The map to check.\r\n * @param {string} property The property to check.\r\n * @return {boolean} Whether map has property.\r\n */\r\nvar has = function(map, property) {\r\n  return hasOwnProperty.call(map, property);\r\n};\r\n\r\n\r\n/**\r\n * Creates an map object without a prototype.\r\n * @return {!Object}\r\n */\r\nvar createMap = function() {\r\n  return create(null);\r\n};\n\n/**\r\n * Keeps track of information needed to perform diffs for a given DOM node.\r\n * @param {!string} nodeName\r\n * @param {?string=} key\r\n * @constructor\r\n */\r\nfunction NodeData(nodeName, key) {\r\n  /**\r\n   * The attributes and their values.\r\n   * @const\r\n   */\r\n  this.attrs = createMap();\r\n\r\n  /**\r\n   * An array of attribute name/value pairs, used for quickly diffing the\r\n   * incomming attributes to see if the DOM node's attributes need to be\r\n   * updated.\r\n   * @const {Array<*>}\r\n   */\r\n  this.attrsArr = [];\r\n\r\n  /**\r\n   * The incoming attributes for this Node, before they are updated.\r\n   * @const {!Object<string, *>}\r\n   */\r\n  this.newAttrs = createMap();\r\n\r\n  /**\r\n   * The key used to identify this node, used to preserve DOM nodes when they\r\n   * move within their parent.\r\n   * @const\r\n   */\r\n  this.key = key;\r\n\r\n  /**\r\n   * Keeps track of children within this node by their key.\r\n   * {?Object<string, !Element>}\r\n   */\r\n  this.keyMap = null;\r\n\r\n  /**\r\n   * Whether or not the keyMap is currently valid.\r\n   * {boolean}\r\n   */\r\n  this.keyMapValid = true;\r\n\r\n  /**\r\n   * The node name for this node.\r\n   * @const {string}\r\n   */\r\n  this.nodeName = nodeName;\r\n\r\n  /**\r\n   * @type {?string}\r\n   */\r\n  this.text = null;\r\n}\r\n\r\n\r\n/**\r\n * Initializes a NodeData object for a Node.\r\n *\r\n * @param {Node} node The node to initialize data for.\r\n * @param {string} nodeName The node name of node.\r\n * @param {?string=} key The key that identifies the node.\r\n * @return {!NodeData} The newly initialized data object\r\n */\r\nvar initData = function(node, nodeName, key) {\r\n  var data = new NodeData(nodeName, key);\r\n  node['__incrementalDOMData'] = data;\r\n  return data;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves the NodeData object for a Node, creating it if necessary.\r\n *\r\n * @param {Node} node The node to retrieve the data for.\r\n * @return {!NodeData} The NodeData for this Node.\r\n */\r\nvar getData = function(node) {\r\n  var data = node['__incrementalDOMData'];\r\n\r\n  if (!data) {\r\n    var nodeName = node.nodeName.toLowerCase();\r\n    var key = null;\r\n\r\n    if (node instanceof Element) {\r\n      key = node.getAttribute('key');\r\n    }\r\n\r\n    data = initData(node, nodeName, key);\r\n  }\r\n\r\n  return data;\r\n};\n\n/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexports.symbols = {\r\n  default: '__default',\r\n\r\n  placeholder: '__placeholder'\r\n};\n\n/**\r\n * Applies an attribute or property to a given Element. If the value is null\r\n * or undefined, it is removed from the Element. Otherwise, the value is set\r\n * as an attribute.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {?(boolean|number|string)=} value The attribute's value.\r\n */\r\nexports.applyAttr = function(el, name, value) {\r\n  if (value == null) {\r\n    el.removeAttribute(name);\r\n  } else {\r\n    el.setAttribute(name, value);\r\n  }\r\n};\r\n\r\n/**\r\n * Applies a property to a given Element.\r\n * @param {!Element} el\r\n * @param {string} name The property's name.\r\n * @param {*} value The property's value.\r\n */\r\nexports.applyProp = function(el, name, value) {\r\n  el[name] = value;\r\n};\r\n\r\n\r\n/**\r\n * Applies a style to an Element. No vendor prefix expansion is done for\r\n * property names/values.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {string|Object<string,string>} style The style to set. Either a\r\n *     string of css or an object containing property-value pairs.\r\n */\r\nvar applyStyle = function(el, name, style) {\r\n  if (typeof style === 'string') {\r\n    el.style.cssText = style;\r\n  } else {\r\n    el.style.cssText = '';\r\n    var elStyle = el.style;\r\n\r\n    for (var prop in style) {\r\n      if (has(style, prop)) {\r\n        elStyle[prop] = style[prop];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Updates a single attribute on an Element.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {*} value The attribute's value. If the value is an object or\r\n *     function it is set on the Element, otherwise, it is set as an HTML\r\n *     attribute.\r\n */\r\nvar applyAttributeTyped = function(el, name, value) {\r\n  var type = typeof value;\r\n\r\n  if (type === 'object' || type === 'function') {\r\n    exports.applyProp(el, name, value);\r\n  } else {\r\n    exports.applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Calls the appropriate attribute mutator for this attribute.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {*} value The attribute's value.\r\n */\r\nvar updateAttribute = function(el, name, value) {\r\n  var data = getData(el);\r\n  var attrs = data.attrs;\r\n\r\n  if (attrs[name] === value) {\r\n    return;\r\n  }\r\n\r\n  var mutator = exports.attributes[name] || exports.attributes[exports.symbols.default];\r\n  mutator(el, name, value);\r\n\r\n  attrs[name] = value;\r\n};\r\n\r\n\r\n/**\r\n * A publicly mutable object to provide custom mutators for attributes.\r\n * @const {!Object<string, function(!Element, string, *)>}\r\n */\r\nexports.attributes = createMap();\r\n\r\n// Special generic mutator that's called for any attribute that does not\r\n// have a specific mutator.\r\nexports.attributes[exports.symbols.default] = applyAttributeTyped;\r\n\r\nexports.attributes[exports.symbols.placeholder] = function() {};\r\n\r\nexports.attributes['style'] = applyStyle;\n\n/**\r\n * Gets the namespace to create an element (of a given tag) in.\r\n * @param {string} tag The tag to get the namespace for.\r\n * @param {!Node} parent\r\n * @return {?string} The namespace to create the tag in.\r\n */\r\nvar getNamespaceForTag = function(tag, parent) {\r\n  if (tag === 'svg') {\r\n    return 'http://www.w3.org/2000/svg';\r\n  }\r\n\r\n  if (getData(parent).nodeName === 'foreignObject') {\r\n    return null;\r\n  }\r\n\r\n  return parent.namespaceURI;\r\n};\r\n\r\n\r\n/**\r\n * Creates an Element.\r\n * @param {Document} doc The document with which to create the Element.\r\n * @param {string} tag The tag for the Element.\r\n * @param {?string=} key A key to identify the Element.\r\n * @param {!Node} parent\r\n * @return {!Element}\r\n */\r\nvar createElement = function(doc, tag, key, parent) {\r\n  var namespace = getNamespaceForTag(tag, parent);\r\n  var el;\r\n\r\n  if (namespace) {\r\n    el = doc.createElementNS(namespace, tag);\r\n  } else {\r\n    el = doc.createElement(tag);\r\n  }\r\n\r\n  return el;\r\n};\r\n\r\n\r\n/**\r\n * Creates a Node, either a Text or an Element depending on the node name\r\n * provided.\r\n * @param {Document} doc The document with which to create the Node.\r\n * @param {string} nodeName The tag if creating an element or #text to create\r\n *     a Text.\r\n * @param {?string=} key A key to identify the Element.\r\n * @param {?Array<*>=} statics The static data to initialize the Node\r\n *     with. For an Element, an array of attribute name/value pairs of\r\n *     the static attributes for the Element.\r\n * @param {!Node} parent\r\n * @return {!Node}\r\n */\r\nvar createNode = function(doc, nodeName, key, statics, parent) {\r\n  var node;\r\n  if (nodeName === '#text') {\r\n    node = doc.createTextNode('');\r\n  } else {\r\n    node = createElement(doc, nodeName, key, parent);\r\n  }\r\n\r\n  initData(node, nodeName, key);\r\n\r\n  if (statics) {\r\n    for (var i = 0; i < statics.length; i += 2) {\r\n      updateAttribute(/** @type {!Element}*/(node),\r\n                      /** @type {!string}*/(statics[i]),\r\n                      statics[i + 1]);\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Creates a mapping that can be used to look up children using a key.\r\n * @param {!Node} el\r\n * @return {!Object<string, !Element>} A mapping of keys to the children of the\r\n *     Element.\r\n */\r\nvar createKeyMap = function(el) {\r\n  var map = createMap();\r\n  var children = el.children;\r\n  var count = children.length;\r\n\r\n  for (var i = 0; i < count; i += 1) {\r\n    var child = children[i];\r\n    var key = getData(child).key;\r\n\r\n    if (key) {\r\n      map[key] = child;\r\n    }\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves the mapping of key to child node for a given Element, creating it\r\n * if necessary.\r\n * @param {!Node} el\r\n * @return {!Object<string, !Node>} A mapping of keys to child Elements\r\n */\r\nvar getKeyMap = function(el) {\r\n  var data = getData(el);\r\n\r\n  if (!data.keyMap) {\r\n    data.keyMap = createKeyMap(el);\r\n  }\r\n\r\n  return data.keyMap;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves a child from the parent with the given key.\r\n * @param {!Node} parent\r\n * @param {?string=} key\r\n * @return {?Element} The child corresponding to the key.\r\n */\r\nvar getChild = function(parent, key) {\r\n  return getKeyMap(parent)[key];\r\n};\r\n\r\n\r\n/**\r\n * Registers an element as being a child. The parent will keep track of the\r\n * child using the key. The child can be retrieved using the same key using\r\n * getKeyMap. The provided key should be unique within the parent Element.\r\n * @param {!Node} parent The parent of child.\r\n * @param {string} key A key to identify the child with.\r\n * @param {!Node} child The child to register.\r\n */\r\nvar registerChild = function(parent, key, child) {\r\n  getKeyMap(parent)[key] = child;\r\n};\n\n/** @type {?Context} */\r\nvar context = null;\r\n\r\n/** @type {?Node} */\r\nvar currentNode;\r\n\r\n/** @type {?Node} */\r\nvar currentParent;\r\n\r\n/** @type {?Node} */\r\nvar previousNode;\r\n\r\n/** @type {?Element|?DocumentFragment} */\r\nvar root;\r\n\r\n/** @type {?Document} */\r\nvar doc;\r\n\r\n\r\n/**\r\n * Patches the document starting at el with the provided function. This function\r\n * may be called during an existing patch operation.\r\n * @param {!Element|!DocumentFragment} node The Element or Document\r\n *     to patch.\r\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\r\n *     calls that describe the DOM.\r\n * @param {T=} data An argument passed to fn to represent DOM state.\r\n * @template T\r\n */\r\nexports.patch = function(node, fn, data) {\r\n  var prevContext = context;\r\n  var prevRoot = root;\r\n  var prevDoc = doc;\r\n  var prevCurrentNode = currentNode;\r\n  var prevCurrentParent = currentParent;\r\n  var prevPreviousNode = previousNode;\r\n\r\n  context = new Context(node);\r\n  root = node;\r\n  doc = node.ownerDocument;\r\n  currentNode = node;\r\n  currentParent = null;\r\n  previousNode = null;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    setInAttributes(false);\r\n  }\r\n\r\n  enterNode();\r\n  fn(data);\r\n  exitNode();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertVirtualAttributesClosed();\r\n    assertNoUnclosedTags(previousNode, node);\r\n  }\r\n\r\n  context.notifyChanges();\r\n\r\n  context = prevContext;\r\n  root = prevRoot;\r\n  doc = prevDoc;\r\n  currentNode = prevCurrentNode;\r\n  currentParent = prevCurrentParent;\r\n  previousNode = prevPreviousNode;\r\n};\r\n\r\n\r\n/**\r\n * Checks whether or not the current node matches the specified nodeName and\r\n * key.\r\n *\r\n * @param {?string} nodeName The nodeName for this node.\r\n * @param {?string=} key An optional key that identifies a node.\r\n * @return {boolean} True if the node matches, false otherwise.\r\n */\r\nvar matches = function(nodeName, key) {\r\n  var data = getData(currentNode);\r\n\r\n  // Key check is done using double equals as we want to treat a null key the\r\n  // same as undefined. This should be okay as the only values allowed are\r\n  // strings, null and undefined so the == semantics are not too weird.\r\n  return nodeName === data.nodeName && key == data.key;\r\n};\r\n\r\n\r\n/**\r\n * Aligns the virtual Element definition with the actual DOM, moving the\r\n * corresponding DOM node to the correct location or creating it if necessary.\r\n * @param {string} nodeName For an Element, this should be a valid tag string.\r\n *     For a Text, this should be #text.\r\n * @param {?string=} key The key used to identify this element.\r\n * @param {?Array<*>=} statics For an Element, this should be an array of\r\n *     name-value pairs.\r\n */\r\nvar alignWithDOM = function(nodeName, key, statics) {\r\n  if (currentNode && matches(nodeName, key)) {\r\n    return;\r\n  }\r\n\r\n  var node;\r\n\r\n  // Check to see if the node has moved within the parent.\r\n  if (key) {\r\n    node = getChild(currentParent, key);\r\n    if (node && process.env.NODE_ENV !== 'production') {\r\n      assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\r\n    }\r\n  }\r\n\r\n  // Create the node if it doesn't exist.\r\n  if (!node) {\r\n    node = createNode(doc, nodeName, key, statics, currentParent);\r\n\r\n    if (key) {\r\n      registerChild(currentParent, key, node);\r\n    }\r\n\r\n    context.markCreated(node);\r\n  }\r\n\r\n  // If the node has a key, remove it from the DOM to prevent a large number\r\n  // of re-orders in the case that it moved far or was completely removed.\r\n  // Since we hold on to a reference through the keyMap, we can always add it\r\n  // back.\r\n  if (currentNode && getData(currentNode).key) {\r\n    currentParent.replaceChild(node, currentNode);\r\n    getData(currentParent).keyMapValid = false;\r\n  } else {\r\n    currentParent.insertBefore(node, currentNode);\r\n  }\r\n\r\n  currentNode = node;\r\n};\r\n\r\n\r\n/**\r\n * Clears out any unvisited Nodes, as the corresponding virtual element\r\n * functions were never called for them.\r\n */\r\nvar clearUnvisitedDOM = function() {\r\n  var node = currentParent;\r\n  var data = getData(node);\r\n  var keyMap = data.keyMap;\r\n  var keyMapValid = data.keyMapValid;\r\n  var child = node.lastChild;\r\n  var key;\r\n\r\n  if (child === previousNode && keyMapValid) {\r\n    return;\r\n  }\r\n\r\n  if (data.attrs[exports.symbols.placeholder] && node !== root) {\r\n    return;\r\n  }\r\n\r\n  while (child !== previousNode) {\r\n    node.removeChild(child);\r\n    context.markDeleted(/** @type {!Node}*/(child));\r\n\r\n    key = getData(child).key;\r\n    if (key) {\r\n      delete keyMap[key];\r\n    }\r\n    child = node.lastChild;\r\n  }\r\n\r\n  // Clean the keyMap, removing any unusued keys.\r\n  if (!keyMapValid) {\r\n    for (key in keyMap) {\r\n      child = keyMap[key];\r\n      if (child.parentNode !== node) {\r\n        context.markDeleted(child);\r\n        delete keyMap[key];\r\n      }\r\n    }\r\n\r\n    data.keyMapValid = true;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Changes to the first child of the current node.\r\n */\r\nvar enterNode = function() {\r\n  currentParent = currentNode;\r\n  currentNode = currentNode.firstChild;\r\n  previousNode = null;\r\n};\r\n\r\n\r\n/**\r\n * Changes to the next sibling of the current node.\r\n */\r\nvar nextNode = function() {\r\n  previousNode = currentNode;\r\n  currentNode = currentNode.nextSibling;\r\n};\r\n\r\n\r\n/**\r\n * Changes to the parent of the current node, removing any unvisited children.\r\n */\r\nvar exitNode = function() {\r\n  clearUnvisitedDOM();\r\n\r\n  previousNode = currentParent;\r\n  currentNode = currentParent.nextSibling;\r\n  currentParent = currentParent.parentNode;\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the current node is an Element with a matching tagName and\r\n * key.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar _elementOpen = function(tag, key, statics) {\r\n  alignWithDOM(tag, key, statics);\r\n  enterNode();\r\n  return /** @type {!Element} */(currentParent);\r\n};\r\n\r\n\r\n/**\r\n * Closes the currently open Element, removing any unvisited children if\r\n * necessary.\r\n *\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar _elementClose = function() {\r\n  exitNode();\r\n  return /** @type {!Element} */(previousNode);\r\n};\r\n\r\n\r\n/**\r\n * Makes sure the current node is a Text node and creates a Text node if it is\r\n * not.\r\n *\r\n * @return {!Text} The corresponding Text Node.\r\n */\r\nvar _text = function() {\r\n  alignWithDOM('#text', null, null);\r\n  nextNode();\r\n  return /** @type {!Text} */(previousNode);\r\n};\r\n\r\n\r\n/**\r\n * Gets the current Element being patched.\r\n * @return {!Element}\r\n */\r\nexports.currentElement = function() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInPatch(context);\r\n    assertNotInAttributes('currentElement');\r\n  }\r\n  return /** @type {!Element} */(currentParent);\r\n};\r\n\r\n\r\n/**\r\n * Skips the children in a subtree, allowing an Element to be closed without\r\n * clearing out the children.\r\n */\r\nexports.skip = function() {\r\n  previousNode = currentParent.lastChild;\r\n};\n\n/**\r\n * The offset in the virtual element declaration where the attributes are\r\n * specified.\r\n * @const\r\n */\r\nvar ATTRIBUTES_OFFSET = 3;\r\n\r\n\r\n/**\r\n * Builds an array of arguments for use with elementOpenStart, attr and\r\n * elementOpenEnd.\r\n * @const {Array<*>}\r\n */\r\nvar argsBuilder = [];\r\n\r\n\r\n/**\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nexports.elementOpen = function(tag, key, statics, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementOpen');\r\n  }\r\n\r\n  var node = _elementOpen(tag, key, statics);\r\n  var data = getData(node);\r\n\r\n  /*\r\n   * Checks to see if one or more attributes have changed for a given Element.\r\n   * When no attributes have changed, this is much faster than checking each\r\n   * individual argument. When attributes have changed, the overhead of this is\r\n   * minimal.\r\n   */\r\n  var attrsArr = data.attrsArr;\r\n  var newAttrs = data.newAttrs;\r\n  var attrsChanged = false;\r\n  var i = ATTRIBUTES_OFFSET;\r\n  var j = 0;\r\n\r\n  for (; i < arguments.length; i += 1, j += 1) {\r\n    if (attrsArr[j] !== arguments[i]) {\r\n      attrsChanged = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  for (; i < arguments.length; i += 1, j += 1) {\r\n    attrsArr[j] = arguments[i];\r\n  }\r\n\r\n  if (j < attrsArr.length) {\r\n    attrsChanged = true;\r\n    attrsArr.length = j;\r\n  }\r\n\r\n  /*\r\n   * Actually perform the attribute update.\r\n   */\r\n  if (attrsChanged) {\r\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\r\n      newAttrs[arguments[i]] = arguments[i + 1];\r\n    }\r\n\r\n    for (var attr in newAttrs) {\r\n      updateAttribute(node, attr, newAttrs[attr]);\r\n      newAttrs[attr] = undefined;\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document. This\r\n * corresponds to an opening tag and a elementClose tag is required. This is\r\n * like elementOpen, but the attributes are defined using the attr function\r\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\r\n * to attr, then a call to elementOpenEnd.\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n */\r\nexports.elementOpenStart = function(tag, key, statics) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementOpenStart');\r\n    setInAttributes(true);\r\n  }\r\n\r\n  argsBuilder[0] = tag;\r\n  argsBuilder[1] = key;\r\n  argsBuilder[2] = statics;\r\n};\r\n\r\n\r\n/***\r\n * Defines a virtual attribute at this point of the DOM. This is only valid\r\n * when called between elementOpenStart and elementOpenEnd.\r\n *\r\n * @param {string} name\r\n * @param {*} value\r\n */\r\nexports.attr = function(name, value) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInAttributes('attr');\r\n  }\r\n\r\n  argsBuilder.push(name, value);\r\n};\r\n\r\n\r\n/**\r\n * Closes an open tag started with elementOpenStart.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nexports.elementOpenEnd = function() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInAttributes('elementOpenEnd');\r\n    setInAttributes(false);\r\n  }\r\n\r\n  var node = exports.elementOpen.apply(null, argsBuilder);\r\n  argsBuilder.length = 0;\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Closes an open virtual Element.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nexports.elementClose = function(tag) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementClose');\r\n  }\r\n\r\n  var node = _elementClose();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document that has\r\n * no children.\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nexports.elementVoid = function(tag, key, statics, var_args) {\r\n  var node = exports.elementOpen.apply(null, arguments);\r\n  exports.elementClose.apply(null, arguments);\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document that is a\r\n * placeholder element. Children of this Element can be manually managed and\r\n * will not be cleared by the library.\r\n *\r\n * A key must be specified to make sure that this node is correctly preserved\r\n * across all conditionals.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @param {string} key The key used to identify this element.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nexports.elementPlaceholder = function(tag, key, statics, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertPlaceholderKeySpecified(key);\r\n  }\r\n\r\n  exports.elementOpen.apply(null, arguments);\r\n  exports.skip();\r\n  return exports.elementClose.apply(null, arguments);\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Text at this point in the document.\r\n *\r\n * @param {string|number|boolean} value The value of the Text.\r\n * @param {...(function((string|number|boolean)):string)} var_args\r\n *     Functions to format the value which are called only when the value has\r\n *     changed.\r\n * @return {!Text} The corresponding text node.\r\n */\r\nexports.text = function(value, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('text');\r\n  }\r\n\r\n  var node = _text();\r\n  var data = getData(node);\r\n\r\n  if (data.text !== value) {\r\n    data.text = /** @type {string} */(value);\r\n\r\n    var formatted = value;\r\n    for (var i = 1; i < arguments.length; i += 1) {\r\n      formatted = arguments[i](formatted);\r\n    }\r\n\r\n    node.data = formatted;\r\n  }\r\n\r\n  return node;\r\n};\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/**\r\n  * Keeps track whether or not we are in an attributes declaration (after\r\n  * elementOpenStart, but before elementOpenEnd).\r\n  * @type {boolean}\r\n  */\r\nvar inAttributes = false;\r\n\r\n\r\n/**\r\n * Makes sure that there is a current patch context.\r\n * @param {*} context\r\n */\r\nvar assertInPatch = function(context) {\r\n  if (!context) {\r\n    throw new Error('Cannot call currentElement() unless in patch');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n* Makes sure that keyed Element matches the tag name provided.\r\n* @param {!Element} nodeName The nodeName of the node that is being matched.\r\n* @param {string=} tag The tag name of the Element.\r\n* @param {?string=} key The key of the Element.\r\n*/\r\nvar assertKeyedTagMatches = function(nodeName, tag, key) {\r\n  if (nodeName !== tag) {\r\n    throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\r\n        tag + ', not a ' + nodeName + '.');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that a patch closes every node that it opened.\r\n * @param {!Node} openElement\r\n * @param {!Node|!DocumentFragment} root\r\n */\r\nvar assertNoUnclosedTags = function(openElement, root) {\r\n  if (openElement === root) {\r\n    return;\r\n  }\r\n\r\n  var openTags = [];\r\n  while (openElement && openElement !== root) {\r\n    openTags.push(openElement.nodeName.toLowerCase());\r\n    openElement = openElement.parentNode;\r\n  }\r\n\r\n  throw new Error('One or more tags were not closed:\\n' +\r\n      openTags.join('\\n'));\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the caller is not where attributes are expected.\r\n * @param {string} functionName\r\n */\r\nvar assertNotInAttributes = function(functionName) {\r\n  if (inAttributes) {\r\n    throw new Error(functionName + '() may not be called between ' +\r\n        'elementOpenStart() and elementOpenEnd().');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the caller is where attributes are expected.\r\n * @param {string} functionName\r\n */\r\nvar assertInAttributes = function(functionName) {\r\n  if (!inAttributes) {\r\n    throw new Error(functionName + '() must be called after ' +\r\n        'elementOpenStart().');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Makes sure the patch closes virtual attributes call\r\n */\r\nvar assertVirtualAttributesClosed = function() {\r\n  if (inAttributes) {\r\n    throw new Error('elementOpenEnd() must be called after calling ' +\r\n        'elementOpenStart().');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n  * Makes sure that placeholders have a key specified. Otherwise, conditional\r\n  * placeholders and conditional elements next to placeholders will cause\r\n  * placeholder elements to be re-used as non-placeholders and vice versa.\r\n  * @param {string} key\r\n  */\r\nvar assertPlaceholderKeySpecified = function(key) {\r\n  if (!key) {\r\n    throw new Error('Placeholder elements must have a key specified.');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n  * Makes sure that tags are correctly nested.\r\n  * @param {string} nodeName\r\n  * @param {string} tag\r\n  */\r\nvar assertCloseMatchesOpenTag = function(nodeName, tag) {\r\n  if (nodeName !== tag) {\r\n    throw new Error('Received a call to close ' + tag + ' but ' +\r\n        nodeName + ' was open.');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Updates the state to being in an attribute declaration.\r\n * @param {boolean} value\r\n */\r\nvar setInAttributes = function(value) {\r\n  inAttributes = value;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  assertInPatch,\r\n  assertKeyedTagMatches,\r\n  assertNoUnclosedTags,\r\n  assertNotInAttributes,\r\n  assertInAttributes,\r\n  assertPlaceholderKeySpecified,\r\n  assertCloseMatchesOpenTag,\r\n  assertVirtualAttributesClosed,\r\n  setInAttributes\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** */\r\nvar notifications = {\r\n  /**\r\n   * Called after patch has compleated with any Nodes that have been created\r\n   * and added to the DOM.\r\n   * @type {?function(Array<!Node>)}\r\n   */\r\n  nodesCreated: null,\r\n\r\n  /**\r\n   * Called after patch has compleated with any Nodes that have been removed\r\n   * from the DOM.\r\n   * Note it's an applications responsibility to handle any childNodes.\r\n   * @type {?function(Array<!Node>)}\r\n   */\r\n  nodesDeleted: null\r\n};\r\n\r\nexport {\r\n  notifications\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { notifications } from './notifications';\r\n\r\n\r\n/**\r\n * Keeps track of the state of a patch.\r\n * @constructor\r\n */\r\nfunction Context() {\r\n  /**\r\n   * @type {(Array<!Node>|undefined)}\r\n   */\r\n  this.created = notifications.nodesCreated && [];\r\n\r\n  /**\r\n   * @type {(Array<!Node>|undefined)}\r\n   */\r\n  this.deleted = notifications.nodesDeleted && [];\r\n}\r\n\r\n\r\n/**\r\n * @param {!Node} node\r\n */\r\nContext.prototype.markCreated = function(node) {\r\n  if (this.created) {\r\n    this.created.push(node);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @param {!Node} node\r\n */\r\nContext.prototype.markDeleted = function(node) {\r\n  if (this.deleted) {\r\n    this.deleted.push(node);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Notifies about nodes that were created during the patch opearation.\r\n */\r\nContext.prototype.notifyChanges = function() {\r\n  if (this.created && this.created.length > 0) {\r\n    notifications.nodesCreated(this.created);\r\n  }\r\n\r\n  if (this.deleted && this.deleted.length > 0) {\r\n    notifications.nodesDeleted(this.deleted);\r\n  }\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  Context\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/**\r\n * A cached reference to the hasOwnProperty function.\r\n */\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n\r\n/**\r\n * A cached reference to the create function.\r\n */\r\nvar create = Object.create;\r\n\r\n\r\n/**\r\n * Used to prevent property collisions between our \"map\" and its prototype.\r\n * @param {!Object<string, *>} map The map to check.\r\n * @param {string} property The property to check.\r\n * @return {boolean} Whether map has property.\r\n */\r\nvar has = function(map, property) {\r\n  return hasOwnProperty.call(map, property);\r\n};\r\n\r\n\r\n/**\r\n * Creates an map object without a prototype.\r\n * @return {!Object}\r\n */\r\nvar createMap = function() {\r\n  return create(null);\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  createMap,\r\n  has\r\n};\r\n\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { createMap } from './util';\r\n\r\n\r\n/**\r\n * Keeps track of information needed to perform diffs for a given DOM node.\r\n * @param {!string} nodeName\r\n * @param {?string=} key\r\n * @constructor\r\n */\r\nfunction NodeData(nodeName, key) {\r\n  /**\r\n   * The attributes and their values.\r\n   * @const\r\n   */\r\n  this.attrs = createMap();\r\n\r\n  /**\r\n   * An array of attribute name/value pairs, used for quickly diffing the\r\n   * incomming attributes to see if the DOM node's attributes need to be\r\n   * updated.\r\n   * @const {Array<*>}\r\n   */\r\n  this.attrsArr = [];\r\n\r\n  /**\r\n   * The incoming attributes for this Node, before they are updated.\r\n   * @const {!Object<string, *>}\r\n   */\r\n  this.newAttrs = createMap();\r\n\r\n  /**\r\n   * The key used to identify this node, used to preserve DOM nodes when they\r\n   * move within their parent.\r\n   * @const\r\n   */\r\n  this.key = key;\r\n\r\n  /**\r\n   * Keeps track of children within this node by their key.\r\n   * {?Object<string, !Element>}\r\n   */\r\n  this.keyMap = null;\r\n\r\n  /**\r\n   * Whether or not the keyMap is currently valid.\r\n   * {boolean}\r\n   */\r\n  this.keyMapValid = true;\r\n\r\n  /**\r\n   * The node name for this node.\r\n   * @const {string}\r\n   */\r\n  this.nodeName = nodeName;\r\n\r\n  /**\r\n   * @type {?string}\r\n   */\r\n  this.text = null;\r\n}\r\n\r\n\r\n/**\r\n * Initializes a NodeData object for a Node.\r\n *\r\n * @param {Node} node The node to initialize data for.\r\n * @param {string} nodeName The node name of node.\r\n * @param {?string=} key The key that identifies the node.\r\n * @return {!NodeData} The newly initialized data object\r\n */\r\nvar initData = function(node, nodeName, key) {\r\n  var data = new NodeData(nodeName, key);\r\n  node['__incrementalDOMData'] = data;\r\n  return data;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves the NodeData object for a Node, creating it if necessary.\r\n *\r\n * @param {Node} node The node to retrieve the data for.\r\n * @return {!NodeData} The NodeData for this Node.\r\n */\r\nvar getData = function(node) {\r\n  var data = node['__incrementalDOMData'];\r\n\r\n  if (!data) {\r\n    var nodeName = node.nodeName.toLowerCase();\r\n    var key = null;\r\n\r\n    if (node instanceof Element) {\r\n      key = node.getAttribute('key');\r\n    }\r\n\r\n    data = initData(node, nodeName, key);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  getData,\r\n  initData\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar symbols = {\r\n  default: '__default',\r\n\r\n  placeholder: '__placeholder'\r\n};\r\n\r\n/** */\r\nexport {\r\n  symbols\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { getData } from './node_data';\r\nimport { symbols } from './symbols';\r\nimport {\r\n  createMap,\r\n  has\r\n} from './util';\r\n\r\n\r\n/**\r\n * Applies an attribute or property to a given Element. If the value is null\r\n * or undefined, it is removed from the Element. Otherwise, the value is set\r\n * as an attribute.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {?(boolean|number|string)=} value The attribute's value.\r\n */\r\nvar applyAttr = function(el, name, value) {\r\n  if (value == null) {\r\n    el.removeAttribute(name);\r\n  } else {\r\n    el.setAttribute(name, value);\r\n  }\r\n};\r\n\r\n/**\r\n * Applies a property to a given Element.\r\n * @param {!Element} el\r\n * @param {string} name The property's name.\r\n * @param {*} value The property's value.\r\n */\r\nvar applyProp = function(el, name, value) {\r\n  el[name] = value;\r\n};\r\n\r\n\r\n/**\r\n * Applies a style to an Element. No vendor prefix expansion is done for\r\n * property names/values.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {string|Object<string,string>} style The style to set. Either a\r\n *     string of css or an object containing property-value pairs.\r\n */\r\nvar applyStyle = function(el, name, style) {\r\n  if (typeof style === 'string') {\r\n    el.style.cssText = style;\r\n  } else {\r\n    el.style.cssText = '';\r\n    var elStyle = el.style;\r\n\r\n    for (var prop in style) {\r\n      if (has(style, prop)) {\r\n        elStyle[prop] = style[prop];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Updates a single attribute on an Element.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {*} value The attribute's value. If the value is an object or\r\n *     function it is set on the Element, otherwise, it is set as an HTML\r\n *     attribute.\r\n */\r\nvar applyAttributeTyped = function(el, name, value) {\r\n  var type = typeof value;\r\n\r\n  if (type === 'object' || type === 'function') {\r\n    applyProp(el, name, value);\r\n  } else {\r\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Calls the appropriate attribute mutator for this attribute.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {*} value The attribute's value.\r\n */\r\nvar updateAttribute = function(el, name, value) {\r\n  var data = getData(el);\r\n  var attrs = data.attrs;\r\n\r\n  if (attrs[name] === value) {\r\n    return;\r\n  }\r\n\r\n  var mutator = attributes[name] || attributes[symbols.default];\r\n  mutator(el, name, value);\r\n\r\n  attrs[name] = value;\r\n};\r\n\r\n\r\n/**\r\n * A publicly mutable object to provide custom mutators for attributes.\r\n * @const {!Object<string, function(!Element, string, *)>}\r\n */\r\nvar attributes = createMap();\r\n\r\n// Special generic mutator that's called for any attribute that does not\r\n// have a specific mutator.\r\nattributes[symbols.default] = applyAttributeTyped;\r\n\r\nattributes[symbols.placeholder] = function() {};\r\n\r\nattributes['style'] = applyStyle;\r\n\r\n\r\n/** */\r\nexport {\r\n  updateAttribute,\r\n  applyProp,\r\n  applyAttr,\r\n  attributes\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { updateAttribute } from './attributes';\r\nimport {\r\n    getData,\r\n    initData\r\n} from './node_data';\r\nimport { createMap } from './util';\r\n\r\n\r\n/**\r\n * Gets the namespace to create an element (of a given tag) in.\r\n * @param {string} tag The tag to get the namespace for.\r\n * @param {!Node} parent\r\n * @return {?string} The namespace to create the tag in.\r\n */\r\nvar getNamespaceForTag = function(tag, parent) {\r\n  if (tag === 'svg') {\r\n    return 'http://www.w3.org/2000/svg';\r\n  }\r\n\r\n  if (getData(parent).nodeName === 'foreignObject') {\r\n    return null;\r\n  }\r\n\r\n  return parent.namespaceURI;\r\n};\r\n\r\n\r\n/**\r\n * Creates an Element.\r\n * @param {Document} doc The document with which to create the Element.\r\n * @param {string} tag The tag for the Element.\r\n * @param {?string=} key A key to identify the Element.\r\n * @param {!Node} parent\r\n * @return {!Element}\r\n */\r\nvar createElement = function(doc, tag, key, parent) {\r\n  var namespace = getNamespaceForTag(tag, parent);\r\n  var el;\r\n\r\n  if (namespace) {\r\n    el = doc.createElementNS(namespace, tag);\r\n  } else {\r\n    el = doc.createElement(tag);\r\n  }\r\n\r\n  return el;\r\n};\r\n\r\n\r\n/**\r\n * Creates a Node, either a Text or an Element depending on the node name\r\n * provided.\r\n * @param {Document} doc The document with which to create the Node.\r\n * @param {string} nodeName The tag if creating an element or #text to create\r\n *     a Text.\r\n * @param {?string=} key A key to identify the Element.\r\n * @param {?Array<*>=} statics The static data to initialize the Node\r\n *     with. For an Element, an array of attribute name/value pairs of\r\n *     the static attributes for the Element.\r\n * @param {!Node} parent\r\n * @return {!Node}\r\n */\r\nvar createNode = function(doc, nodeName, key, statics, parent) {\r\n  var node;\r\n  if (nodeName === '#text') {\r\n    node = doc.createTextNode('');\r\n  } else {\r\n    node = createElement(doc, nodeName, key, parent);\r\n  }\r\n\r\n  initData(node, nodeName, key);\r\n\r\n  if (statics) {\r\n    for (var i = 0; i < statics.length; i += 2) {\r\n      updateAttribute(/** @type {!Element}*/(node),\r\n                      /** @type {!string}*/(statics[i]),\r\n                      statics[i + 1]);\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Creates a mapping that can be used to look up children using a key.\r\n * @param {!Node} el\r\n * @return {!Object<string, !Element>} A mapping of keys to the children of the\r\n *     Element.\r\n */\r\nvar createKeyMap = function(el) {\r\n  var map = createMap();\r\n  var children = el.children;\r\n  var count = children.length;\r\n\r\n  for (var i = 0; i < count; i += 1) {\r\n    var child = children[i];\r\n    var key = getData(child).key;\r\n\r\n    if (key) {\r\n      map[key] = child;\r\n    }\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves the mapping of key to child node for a given Element, creating it\r\n * if necessary.\r\n * @param {!Node} el\r\n * @return {!Object<string, !Node>} A mapping of keys to child Elements\r\n */\r\nvar getKeyMap = function(el) {\r\n  var data = getData(el);\r\n\r\n  if (!data.keyMap) {\r\n    data.keyMap = createKeyMap(el);\r\n  }\r\n\r\n  return data.keyMap;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves a child from the parent with the given key.\r\n * @param {!Node} parent\r\n * @param {?string=} key\r\n * @return {?Element} The child corresponding to the key.\r\n */\r\nvar getChild = function(parent, key) {\r\n  return getKeyMap(parent)[key];\r\n};\r\n\r\n\r\n/**\r\n * Registers an element as being a child. The parent will keep track of the\r\n * child using the key. The child can be retrieved using the same key using\r\n * getKeyMap. The provided key should be unique within the parent Element.\r\n * @param {!Node} parent The parent of child.\r\n * @param {string} key A key to identify the child with.\r\n * @param {!Node} child The child to register.\r\n */\r\nvar registerChild = function(parent, key, child) {\r\n  getKeyMap(parent)[key] = child;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  createNode,\r\n  getChild,\r\n  registerChild\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {\r\n  createNode,\r\n  getChild,\r\n  registerChild\r\n} from './nodes';\r\nimport { getData } from './node_data';\r\nimport { Context } from './context';\r\nimport { symbols } from './symbols';\r\nimport {\r\n  assertInPatch,\r\n  assertKeyedTagMatches,\r\n  assertNoUnclosedTags,\r\n  assertNotInAttributes,\r\n  assertVirtualAttributesClosed,\r\n  setInAttributes\r\n} from './assertions';\r\nimport { notifications } from './notifications';\r\n\r\n\r\n/** @type {?Context} */\r\nvar context = null;\r\n\r\n/** @type {?Node} */\r\nvar currentNode;\r\n\r\n/** @type {?Node} */\r\nvar currentParent;\r\n\r\n/** @type {?Node} */\r\nvar previousNode;\r\n\r\n/** @type {?Element|?DocumentFragment} */\r\nvar root;\r\n\r\n/** @type {?Document} */\r\nvar doc;\r\n\r\n\r\n/**\r\n * Patches the document starting at el with the provided function. This function\r\n * may be called during an existing patch operation.\r\n * @param {!Element|!DocumentFragment} node The Element or Document\r\n *     to patch.\r\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\r\n *     calls that describe the DOM.\r\n * @param {T=} data An argument passed to fn to represent DOM state.\r\n * @template T\r\n */\r\nvar patch = function(node, fn, data) {\r\n  var prevContext = context;\r\n  var prevRoot = root;\r\n  var prevDoc = doc;\r\n  var prevCurrentNode = currentNode;\r\n  var prevCurrentParent = currentParent;\r\n  var prevPreviousNode = previousNode;\r\n\r\n  context = new Context(node);\r\n  root = node;\r\n  doc = node.ownerDocument;\r\n  currentNode = node;\r\n  currentParent = null;\r\n  previousNode = null;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    setInAttributes(false);\r\n  }\r\n\r\n  enterNode();\r\n  fn(data);\r\n  exitNode();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertVirtualAttributesClosed();\r\n    assertNoUnclosedTags(previousNode, node);\r\n  }\r\n\r\n  context.notifyChanges();\r\n\r\n  context = prevContext;\r\n  root = prevRoot;\r\n  doc = prevDoc;\r\n  currentNode = prevCurrentNode;\r\n  currentParent = prevCurrentParent;\r\n  previousNode = prevPreviousNode;\r\n};\r\n\r\n\r\n/**\r\n * Checks whether or not the current node matches the specified nodeName and\r\n * key.\r\n *\r\n * @param {?string} nodeName The nodeName for this node.\r\n * @param {?string=} key An optional key that identifies a node.\r\n * @return {boolean} True if the node matches, false otherwise.\r\n */\r\nvar matches = function(nodeName, key) {\r\n  var data = getData(currentNode);\r\n\r\n  // Key check is done using double equals as we want to treat a null key the\r\n  // same as undefined. This should be okay as the only values allowed are\r\n  // strings, null and undefined so the == semantics are not too weird.\r\n  return nodeName === data.nodeName && key == data.key;\r\n};\r\n\r\n\r\n/**\r\n * Aligns the virtual Element definition with the actual DOM, moving the\r\n * corresponding DOM node to the correct location or creating it if necessary.\r\n * @param {string} nodeName For an Element, this should be a valid tag string.\r\n *     For a Text, this should be #text.\r\n * @param {?string=} key The key used to identify this element.\r\n * @param {?Array<*>=} statics For an Element, this should be an array of\r\n *     name-value pairs.\r\n */\r\nvar alignWithDOM = function(nodeName, key, statics) {\r\n  if (currentNode && matches(nodeName, key)) {\r\n    return;\r\n  }\r\n\r\n  var node;\r\n\r\n  // Check to see if the node has moved within the parent.\r\n  if (key) {\r\n    node = getChild(currentParent, key);\r\n    if (node && process.env.NODE_ENV !== 'production') {\r\n      assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\r\n    }\r\n  }\r\n\r\n  // Create the node if it doesn't exist.\r\n  if (!node) {\r\n    node = createNode(doc, nodeName, key, statics, currentParent);\r\n\r\n    if (key) {\r\n      registerChild(currentParent, key, node);\r\n    }\r\n\r\n    context.markCreated(node);\r\n  }\r\n\r\n  // If the node has a key, remove it from the DOM to prevent a large number\r\n  // of re-orders in the case that it moved far or was completely removed.\r\n  // Since we hold on to a reference through the keyMap, we can always add it\r\n  // back.\r\n  if (currentNode && getData(currentNode).key) {\r\n    currentParent.replaceChild(node, currentNode);\r\n    getData(currentParent).keyMapValid = false;\r\n  } else {\r\n    currentParent.insertBefore(node, currentNode);\r\n  }\r\n\r\n  currentNode = node;\r\n};\r\n\r\n\r\n/**\r\n * Clears out any unvisited Nodes, as the corresponding virtual element\r\n * functions were never called for them.\r\n */\r\nvar clearUnvisitedDOM = function() {\r\n  var node = currentParent;\r\n  var data = getData(node);\r\n  var keyMap = data.keyMap;\r\n  var keyMapValid = data.keyMapValid;\r\n  var child = node.lastChild;\r\n  var key;\r\n\r\n  if (child === previousNode && keyMapValid) {\r\n    return;\r\n  }\r\n\r\n  if (data.attrs[symbols.placeholder] && node !== root) {\r\n    return;\r\n  }\r\n\r\n  while (child !== previousNode) {\r\n    node.removeChild(child);\r\n    context.markDeleted(/** @type {!Node}*/(child));\r\n\r\n    key = getData(child).key;\r\n    if (key) {\r\n      delete keyMap[key];\r\n    }\r\n    child = node.lastChild;\r\n  }\r\n\r\n  // Clean the keyMap, removing any unusued keys.\r\n  if (!keyMapValid) {\r\n    for (key in keyMap) {\r\n      child = keyMap[key];\r\n      if (child.parentNode !== node) {\r\n        context.markDeleted(child);\r\n        delete keyMap[key];\r\n      }\r\n    }\r\n\r\n    data.keyMapValid = true;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Changes to the first child of the current node.\r\n */\r\nvar enterNode = function() {\r\n  currentParent = currentNode;\r\n  currentNode = currentNode.firstChild;\r\n  previousNode = null;\r\n};\r\n\r\n\r\n/**\r\n * Changes to the next sibling of the current node.\r\n */\r\nvar nextNode = function() {\r\n  previousNode = currentNode;\r\n  currentNode = currentNode.nextSibling;\r\n};\r\n\r\n\r\n/**\r\n * Changes to the parent of the current node, removing any unvisited children.\r\n */\r\nvar exitNode = function() {\r\n  clearUnvisitedDOM();\r\n\r\n  previousNode = currentParent;\r\n  currentNode = currentParent.nextSibling;\r\n  currentParent = currentParent.parentNode;\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the current node is an Element with a matching tagName and\r\n * key.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementOpen = function(tag, key, statics) {\r\n  alignWithDOM(tag, key, statics);\r\n  enterNode();\r\n  return /** @type {!Element} */(currentParent);\r\n};\r\n\r\n\r\n/**\r\n * Closes the currently open Element, removing any unvisited children if\r\n * necessary.\r\n *\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementClose = function() {\r\n  exitNode();\r\n  return /** @type {!Element} */(previousNode);\r\n};\r\n\r\n\r\n/**\r\n * Makes sure the current node is a Text node and creates a Text node if it is\r\n * not.\r\n *\r\n * @return {!Text} The corresponding Text Node.\r\n */\r\nvar text = function() {\r\n  alignWithDOM('#text', null, null);\r\n  nextNode();\r\n  return /** @type {!Text} */(previousNode);\r\n};\r\n\r\n\r\n/**\r\n * Gets the current Element being patched.\r\n * @return {!Element}\r\n */\r\nvar currentElement = function() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInPatch(context);\r\n    assertNotInAttributes('currentElement');\r\n  }\r\n  return /** @type {!Element} */(currentParent);\r\n};\r\n\r\n\r\n/**\r\n * Skips the children in a subtree, allowing an Element to be closed without\r\n * clearing out the children.\r\n */\r\nvar skip = function() {\r\n  previousNode = currentParent.lastChild;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  elementOpen,\r\n  elementClose,\r\n  text,\r\n  patch,\r\n  currentElement,\r\n  skip\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {\r\n  elementOpen as coreElementOpen,\r\n  elementClose as coreElementClose,\r\n  text as coreText,\r\n  currentElement,\r\n  skip\r\n} from './core';\r\nimport { updateAttribute } from './attributes';\r\nimport { getData } from './node_data';\r\nimport { symbols } from './symbols';\r\nimport {\r\n  assertNotInAttributes,\r\n  assertInAttributes,\r\n  assertPlaceholderKeySpecified,\r\n  assertCloseMatchesOpenTag,\r\n  setInAttributes\r\n} from './assertions';\r\n\r\n\r\n/**\r\n * The offset in the virtual element declaration where the attributes are\r\n * specified.\r\n * @const\r\n */\r\nvar ATTRIBUTES_OFFSET = 3;\r\n\r\n\r\n/**\r\n * Builds an array of arguments for use with elementOpenStart, attr and\r\n * elementOpenEnd.\r\n * @const {Array<*>}\r\n */\r\nvar argsBuilder = [];\r\n\r\n\r\n/**\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementOpen = function(tag, key, statics, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementOpen');\r\n  }\r\n\r\n  var node = coreElementOpen(tag, key, statics);\r\n  var data = getData(node);\r\n\r\n  /*\r\n   * Checks to see if one or more attributes have changed for a given Element.\r\n   * When no attributes have changed, this is much faster than checking each\r\n   * individual argument. When attributes have changed, the overhead of this is\r\n   * minimal.\r\n   */\r\n  var attrsArr = data.attrsArr;\r\n  var newAttrs = data.newAttrs;\r\n  var attrsChanged = false;\r\n  var i = ATTRIBUTES_OFFSET;\r\n  var j = 0;\r\n\r\n  for (; i < arguments.length; i += 1, j += 1) {\r\n    if (attrsArr[j] !== arguments[i]) {\r\n      attrsChanged = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  for (; i < arguments.length; i += 1, j += 1) {\r\n    attrsArr[j] = arguments[i];\r\n  }\r\n\r\n  if (j < attrsArr.length) {\r\n    attrsChanged = true;\r\n    attrsArr.length = j;\r\n  }\r\n\r\n  /*\r\n   * Actually perform the attribute update.\r\n   */\r\n  if (attrsChanged) {\r\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\r\n      newAttrs[arguments[i]] = arguments[i + 1];\r\n    }\r\n\r\n    for (var attr in newAttrs) {\r\n      updateAttribute(node, attr, newAttrs[attr]);\r\n      newAttrs[attr] = undefined;\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document. This\r\n * corresponds to an opening tag and a elementClose tag is required. This is\r\n * like elementOpen, but the attributes are defined using the attr function\r\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\r\n * to attr, then a call to elementOpenEnd.\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n */\r\nvar elementOpenStart = function(tag, key, statics) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementOpenStart');\r\n    setInAttributes(true);\r\n  }\r\n\r\n  argsBuilder[0] = tag;\r\n  argsBuilder[1] = key;\r\n  argsBuilder[2] = statics;\r\n};\r\n\r\n\r\n/***\r\n * Defines a virtual attribute at this point of the DOM. This is only valid\r\n * when called between elementOpenStart and elementOpenEnd.\r\n *\r\n * @param {string} name\r\n * @param {*} value\r\n */\r\nvar attr = function(name, value) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInAttributes('attr');\r\n  }\r\n\r\n  argsBuilder.push(name, value);\r\n};\r\n\r\n\r\n/**\r\n * Closes an open tag started with elementOpenStart.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementOpenEnd = function() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInAttributes('elementOpenEnd');\r\n    setInAttributes(false);\r\n  }\r\n\r\n  var node = elementOpen.apply(null, argsBuilder);\r\n  argsBuilder.length = 0;\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Closes an open virtual Element.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementClose = function(tag) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementClose');\r\n  }\r\n\r\n  var node = coreElementClose();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document that has\r\n * no children.\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementVoid = function(tag, key, statics, var_args) {\r\n  var node = elementOpen.apply(null, arguments);\r\n  elementClose.apply(null, arguments);\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document that is a\r\n * placeholder element. Children of this Element can be manually managed and\r\n * will not be cleared by the library.\r\n *\r\n * A key must be specified to make sure that this node is correctly preserved\r\n * across all conditionals.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @param {string} key The key used to identify this element.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementPlaceholder = function(tag, key, statics, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertPlaceholderKeySpecified(key);\r\n  }\r\n\r\n  elementOpen.apply(null, arguments);\r\n  skip();\r\n  return elementClose.apply(null, arguments);\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Text at this point in the document.\r\n *\r\n * @param {string|number|boolean} value The value of the Text.\r\n * @param {...(function((string|number|boolean)):string)} var_args\r\n *     Functions to format the value which are called only when the value has\r\n *     changed.\r\n * @return {!Text} The corresponding text node.\r\n */\r\nvar text = function(value, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('text');\r\n  }\r\n\r\n  var node = coreText();\r\n  var data = getData(node);\r\n\r\n  if (data.text !== value) {\r\n    data.text = /** @type {string} */(value);\r\n\r\n    var formatted = value;\r\n    for (var i = 1; i < arguments.length; i += 1) {\r\n      formatted = arguments[i](formatted);\r\n    }\r\n\r\n    node.data = formatted;\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  elementOpenStart,\r\n  elementOpenEnd,\r\n  elementOpen,\r\n  elementVoid,\r\n  elementClose,\r\n  elementPlaceholder,\r\n  text,\r\n  attr\r\n};\r\n"],"sourceRoot":"/source/"}