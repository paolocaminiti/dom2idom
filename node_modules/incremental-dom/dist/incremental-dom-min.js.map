{"version":3,"sources":["incremental-dom-min.js","src/context.js","src/node_data.js","src/notifications.js","src/util.js","src/symbols.js","src/attributes.js","src/nodes.js","src/core.js","src/virtual_elements.js"],"names":["global","factory","exports","module","define","amd","IncrementalDOM","this","Context","created","notifications","nodesCreated","deleted","nodesDeleted","NodeData","nodeName","key","attrs","createMap","attrsArr","newAttrs","keyMap","keyMapValid","text","prototype","markCreated","node","push","markDeleted","notifyChanges","length","hasOwnProperty","Object","create","has","map","property","call","initData","data","getData","toLowerCase","Element","getAttribute","symbols","default","placeholder","applyAttr","el","name","value","removeAttribute","setAttribute","applyProp","applyStyle","style","cssText","elStyle","prop","applyAttributeTyped","type","updateAttribute","mutator","attributes","currentNode","currentParent","previousNode","root","doc","getNamespaceForTag","tag","parent","namespaceURI","createElement","namespace","createElementNS","createNode","statics","createTextNode","i","createKeyMap","children","count","child","getKeyMap","getChild","registerChild","context","patch","fn","prevContext","prevRoot","prevDoc","prevCurrentNode","prevCurrentParent","prevPreviousNode","ownerDocument","enterNode","exitNode","matches","alignWithDOM","replaceChild","insertBefore","clearUnvisitedDOM","lastChild","removeChild","parentNode","firstChild","nextNode","nextSibling","_elementOpen","_elementClose","_text","currentElement","skip","ATTRIBUTES_OFFSET","argsBuilder","elementOpen","var_args","attrsChanged","j","arguments","attr","undefined","elementOpenStart","elementOpenEnd","apply","elementClose","elementVoid","elementPlaceholder","formatted"],"mappings":"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","file":"incremental-dom-min.js","sourcesContent":["\r\n/**\r\n * @license\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  factory((global.IncrementalDOM = {}));\n}(this, function (exports) { 'use strict';\n\n  /**\r\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *      http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n\r\n  /**\r\n    * Keeps track whether or not we are in an attributes declaration (after\r\n    * elementOpenStart, but before elementOpenEnd).\r\n    * @type {boolean}\r\n    */\r\n  var inAttributes = false;\r\n\r\n\r\n  /**\r\n   * Makes sure that there is a current patch context.\r\n   * @param {*} context\r\n   */\r\n  var assertInPatch = function(context) {\r\n    if (!context) {\r\n      throw new Error('Cannot call currentElement() unless in patch');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n  * Makes sure that keyed Element matches the tag name provided.\r\n  * @param {!Element} nodeName The nodeName of the node that is being matched.\r\n  * @param {string=} tag The tag name of the Element.\r\n  * @param {?string=} key The key of the Element.\r\n  */\r\n  var assertKeyedTagMatches = function(nodeName, tag, key) {\r\n    if (nodeName !== tag) {\r\n      throw new Error('Was expecting node with key \"' + key + '\" to be a ' +\r\n          tag + ', not a ' + nodeName + '.');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Makes sure that a patch closes every node that it opened.\r\n   * @param {!Node} openElement\r\n   * @param {!Node|!DocumentFragment} root\r\n   */\r\n  var assertNoUnclosedTags = function(openElement, root) {\r\n    if (openElement === root) {\r\n      return;\r\n    }\r\n\r\n    var openTags = [];\r\n    while (openElement && openElement !== root) {\r\n      openTags.push(openElement.nodeName.toLowerCase());\r\n      openElement = openElement.parentNode;\r\n    }\r\n\r\n    throw new Error('One or more tags were not closed:\\n' +\r\n        openTags.join('\\n'));\r\n  };\r\n\r\n\r\n  /**\r\n   * Makes sure that the caller is not where attributes are expected.\r\n   * @param {string} functionName\r\n   */\r\n  var assertNotInAttributes = function(functionName) {\r\n    if (inAttributes) {\r\n      throw new Error(functionName + '() may not be called between ' +\r\n          'elementOpenStart() and elementOpenEnd().');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Makes sure that the caller is where attributes are expected.\r\n   * @param {string} functionName\r\n   */\r\n  var assertInAttributes = function(functionName) {\r\n    if (!inAttributes) {\r\n      throw new Error(functionName + '() must be called after ' +\r\n          'elementOpenStart().');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Makes sure the patch closes virtual attributes call\r\n   */\r\n  var assertVirtualAttributesClosed = function() {\r\n    if (inAttributes) {\r\n      throw new Error('elementOpenEnd() must be called after calling ' +\r\n          'elementOpenStart().');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n    * Makes sure that placeholders have a key specified. Otherwise, conditional\r\n    * placeholders and conditional elements next to placeholders will cause\r\n    * placeholder elements to be re-used as non-placeholders and vice versa.\r\n    * @param {string} key\r\n    */\r\n  var assertPlaceholderKeySpecified = function(key) {\r\n    if (!key) {\r\n      throw new Error('Placeholder elements must have a key specified.');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n    * Makes sure that tags are correctly nested.\r\n    * @param {string} nodeName\r\n    * @param {string} tag\r\n    */\r\n  var assertCloseMatchesOpenTag = function(nodeName, tag) {\r\n    if (nodeName !== tag) {\r\n      throw new Error('Received a call to close ' + tag + ' but ' +\r\n          nodeName + ' was open.');\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Updates the state to being in an attribute declaration.\r\n   * @param {boolean} value\r\n   */\r\n  var setInAttributes = function(value) {\r\n    inAttributes = value;\r\n  };\n\n  /**\r\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *      http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n  /** */\r\n  exports.notifications = {\r\n    /**\r\n     * Called after patch has compleated with any Nodes that have been created\r\n     * and added to the DOM.\r\n     * @type {?function(Array<!Node>)}\r\n     */\r\n    nodesCreated: null,\r\n\r\n    /**\r\n     * Called after patch has compleated with any Nodes that have been removed\r\n     * from the DOM.\r\n     * Note it's an applications responsibility to handle any childNodes.\r\n     * @type {?function(Array<!Node>)}\r\n     */\r\n    nodesDeleted: null\r\n  };\n\n  /**\r\n   * Keeps track of the state of a patch.\r\n   * @constructor\r\n   */\r\n  function Context() {\r\n    /**\r\n     * @type {(Array<!Node>|undefined)}\r\n     */\r\n    this.created = exports.notifications.nodesCreated && [];\r\n\r\n    /**\r\n     * @type {(Array<!Node>|undefined)}\r\n     */\r\n    this.deleted = exports.notifications.nodesDeleted && [];\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {!Node} node\r\n   */\r\n  Context.prototype.markCreated = function(node) {\r\n    if (this.created) {\r\n      this.created.push(node);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {!Node} node\r\n   */\r\n  Context.prototype.markDeleted = function(node) {\r\n    if (this.deleted) {\r\n      this.deleted.push(node);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Notifies about nodes that were created during the patch opearation.\r\n   */\r\n  Context.prototype.notifyChanges = function() {\r\n    if (this.created && this.created.length > 0) {\r\n      exports.notifications.nodesCreated(this.created);\r\n    }\r\n\r\n    if (this.deleted && this.deleted.length > 0) {\r\n      exports.notifications.nodesDeleted(this.deleted);\r\n    }\r\n  };\n\n  /**\r\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *      http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n\r\n  /**\r\n   * A cached reference to the hasOwnProperty function.\r\n   */\r\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n\r\n  /**\r\n   * A cached reference to the create function.\r\n   */\r\n  var create = Object.create;\r\n\r\n\r\n  /**\r\n   * Used to prevent property collisions between our \"map\" and its prototype.\r\n   * @param {!Object<string, *>} map The map to check.\r\n   * @param {string} property The property to check.\r\n   * @return {boolean} Whether map has property.\r\n   */\r\n  var has = function(map, property) {\r\n    return hasOwnProperty.call(map, property);\r\n  };\r\n\r\n\r\n  /**\r\n   * Creates an map object without a prototype.\r\n   * @return {!Object}\r\n   */\r\n  var createMap = function() {\r\n    return create(null);\r\n  };\n\n  /**\r\n   * Keeps track of information needed to perform diffs for a given DOM node.\r\n   * @param {!string} nodeName\r\n   * @param {?string=} key\r\n   * @constructor\r\n   */\r\n  function NodeData(nodeName, key) {\r\n    /**\r\n     * The attributes and their values.\r\n     * @const\r\n     */\r\n    this.attrs = createMap();\r\n\r\n    /**\r\n     * An array of attribute name/value pairs, used for quickly diffing the\r\n     * incomming attributes to see if the DOM node's attributes need to be\r\n     * updated.\r\n     * @const {Array<*>}\r\n     */\r\n    this.attrsArr = [];\r\n\r\n    /**\r\n     * The incoming attributes for this Node, before they are updated.\r\n     * @const {!Object<string, *>}\r\n     */\r\n    this.newAttrs = createMap();\r\n\r\n    /**\r\n     * The key used to identify this node, used to preserve DOM nodes when they\r\n     * move within their parent.\r\n     * @const\r\n     */\r\n    this.key = key;\r\n\r\n    /**\r\n     * Keeps track of children within this node by their key.\r\n     * {?Object<string, !Element>}\r\n     */\r\n    this.keyMap = null;\r\n\r\n    /**\r\n     * Whether or not the keyMap is currently valid.\r\n     * {boolean}\r\n     */\r\n    this.keyMapValid = true;\r\n\r\n    /**\r\n     * The node name for this node.\r\n     * @const {string}\r\n     */\r\n    this.nodeName = nodeName;\r\n\r\n    /**\r\n     * @type {?string}\r\n     */\r\n    this.text = null;\r\n  }\r\n\r\n\r\n  /**\r\n   * Initializes a NodeData object for a Node.\r\n   *\r\n   * @param {Node} node The node to initialize data for.\r\n   * @param {string} nodeName The node name of node.\r\n   * @param {?string=} key The key that identifies the node.\r\n   * @return {!NodeData} The newly initialized data object\r\n   */\r\n  var initData = function(node, nodeName, key) {\r\n    var data = new NodeData(nodeName, key);\r\n    node['__incrementalDOMData'] = data;\r\n    return data;\r\n  };\r\n\r\n\r\n  /**\r\n   * Retrieves the NodeData object for a Node, creating it if necessary.\r\n   *\r\n   * @param {Node} node The node to retrieve the data for.\r\n   * @return {!NodeData} The NodeData for this Node.\r\n   */\r\n  var getData = function(node) {\r\n    var data = node['__incrementalDOMData'];\r\n\r\n    if (!data) {\r\n      var nodeName = node.nodeName.toLowerCase();\r\n      var key = null;\r\n\r\n      if (node instanceof Element) {\r\n        key = node.getAttribute('key');\r\n      }\r\n\r\n      data = initData(node, nodeName, key);\r\n    }\r\n\r\n    return data;\r\n  };\n\n  /**\r\n   * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *      http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n  exports.symbols = {\r\n    default: '__default',\r\n\r\n    placeholder: '__placeholder'\r\n  };\n\n  /**\r\n   * Applies an attribute or property to a given Element. If the value is null\r\n   * or undefined, it is removed from the Element. Otherwise, the value is set\r\n   * as an attribute.\r\n   * @param {!Element} el\r\n   * @param {string} name The attribute's name.\r\n   * @param {?(boolean|number|string)=} value The attribute's value.\r\n   */\r\n  exports.applyAttr = function(el, name, value) {\r\n    if (value == null) {\r\n      el.removeAttribute(name);\r\n    } else {\r\n      el.setAttribute(name, value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Applies a property to a given Element.\r\n   * @param {!Element} el\r\n   * @param {string} name The property's name.\r\n   * @param {*} value The property's value.\r\n   */\r\n  exports.applyProp = function(el, name, value) {\r\n    el[name] = value;\r\n  };\r\n\r\n\r\n  /**\r\n   * Applies a style to an Element. No vendor prefix expansion is done for\r\n   * property names/values.\r\n   * @param {!Element} el\r\n   * @param {string} name The attribute's name.\r\n   * @param {string|Object<string,string>} style The style to set. Either a\r\n   *     string of css or an object containing property-value pairs.\r\n   */\r\n  var applyStyle = function(el, name, style) {\r\n    if (typeof style === 'string') {\r\n      el.style.cssText = style;\r\n    } else {\r\n      el.style.cssText = '';\r\n      var elStyle = el.style;\r\n\r\n      for (var prop in style) {\r\n        if (has(style, prop)) {\r\n          elStyle[prop] = style[prop];\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Updates a single attribute on an Element.\r\n   * @param {!Element} el\r\n   * @param {string} name The attribute's name.\r\n   * @param {*} value The attribute's value. If the value is an object or\r\n   *     function it is set on the Element, otherwise, it is set as an HTML\r\n   *     attribute.\r\n   */\r\n  var applyAttributeTyped = function(el, name, value) {\r\n    var type = typeof value;\r\n\r\n    if (type === 'object' || type === 'function') {\r\n      exports.applyProp(el, name, value);\r\n    } else {\r\n      exports.applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Calls the appropriate attribute mutator for this attribute.\r\n   * @param {!Element} el\r\n   * @param {string} name The attribute's name.\r\n   * @param {*} value The attribute's value.\r\n   */\r\n  var updateAttribute = function(el, name, value) {\r\n    var data = getData(el);\r\n    var attrs = data.attrs;\r\n\r\n    if (attrs[name] === value) {\r\n      return;\r\n    }\r\n\r\n    var mutator = exports.attributes[name] || exports.attributes[exports.symbols.default];\r\n    mutator(el, name, value);\r\n\r\n    attrs[name] = value;\r\n  };\r\n\r\n\r\n  /**\r\n   * A publicly mutable object to provide custom mutators for attributes.\r\n   * @const {!Object<string, function(!Element, string, *)>}\r\n   */\r\n  exports.attributes = createMap();\r\n\r\n  // Special generic mutator that's called for any attribute that does not\r\n  // have a specific mutator.\r\n  exports.attributes[exports.symbols.default] = applyAttributeTyped;\r\n\r\n  exports.attributes[exports.symbols.placeholder] = function() {};\r\n\r\n  exports.attributes['style'] = applyStyle;\n\n  /**\r\n   * Gets the namespace to create an element (of a given tag) in.\r\n   * @param {string} tag The tag to get the namespace for.\r\n   * @param {!Node} parent\r\n   * @return {?string} The namespace to create the tag in.\r\n   */\r\n  var getNamespaceForTag = function(tag, parent) {\r\n    if (tag === 'svg') {\r\n      return 'http://www.w3.org/2000/svg';\r\n    }\r\n\r\n    if (getData(parent).nodeName === 'foreignObject') {\r\n      return null;\r\n    }\r\n\r\n    return parent.namespaceURI;\r\n  };\r\n\r\n\r\n  /**\r\n   * Creates an Element.\r\n   * @param {Document} doc The document with which to create the Element.\r\n   * @param {string} tag The tag for the Element.\r\n   * @param {?string=} key A key to identify the Element.\r\n   * @param {!Node} parent\r\n   * @return {!Element}\r\n   */\r\n  var createElement = function(doc, tag, key, parent) {\r\n    var namespace = getNamespaceForTag(tag, parent);\r\n    var el;\r\n\r\n    if (namespace) {\r\n      el = doc.createElementNS(namespace, tag);\r\n    } else {\r\n      el = doc.createElement(tag);\r\n    }\r\n\r\n    return el;\r\n  };\r\n\r\n\r\n  /**\r\n   * Creates a Node, either a Text or an Element depending on the node name\r\n   * provided.\r\n   * @param {Document} doc The document with which to create the Node.\r\n   * @param {string} nodeName The tag if creating an element or #text to create\r\n   *     a Text.\r\n   * @param {?string=} key A key to identify the Element.\r\n   * @param {?Array<*>=} statics The static data to initialize the Node\r\n   *     with. For an Element, an array of attribute name/value pairs of\r\n   *     the static attributes for the Element.\r\n   * @param {!Node} parent\r\n   * @return {!Node}\r\n   */\r\n  var createNode = function(doc, nodeName, key, statics, parent) {\r\n    var node;\r\n    if (nodeName === '#text') {\r\n      node = doc.createTextNode('');\r\n    } else {\r\n      node = createElement(doc, nodeName, key, parent);\r\n    }\r\n\r\n    initData(node, nodeName, key);\r\n\r\n    if (statics) {\r\n      for (var i = 0; i < statics.length; i += 2) {\r\n        updateAttribute(/** @type {!Element}*/(node),\r\n                        /** @type {!string}*/(statics[i]),\r\n                        statics[i + 1]);\r\n      }\r\n    }\r\n\r\n    return node;\r\n  };\r\n\r\n\r\n  /**\r\n   * Creates a mapping that can be used to look up children using a key.\r\n   * @param {!Node} el\r\n   * @return {!Object<string, !Element>} A mapping of keys to the children of the\r\n   *     Element.\r\n   */\r\n  var createKeyMap = function(el) {\r\n    var map = createMap();\r\n    var children = el.children;\r\n    var count = children.length;\r\n\r\n    for (var i = 0; i < count; i += 1) {\r\n      var child = children[i];\r\n      var key = getData(child).key;\r\n\r\n      if (key) {\r\n        map[key] = child;\r\n      }\r\n    }\r\n\r\n    return map;\r\n  };\r\n\r\n\r\n  /**\r\n   * Retrieves the mapping of key to child node for a given Element, creating it\r\n   * if necessary.\r\n   * @param {!Node} el\r\n   * @return {!Object<string, !Node>} A mapping of keys to child Elements\r\n   */\r\n  var getKeyMap = function(el) {\r\n    var data = getData(el);\r\n\r\n    if (!data.keyMap) {\r\n      data.keyMap = createKeyMap(el);\r\n    }\r\n\r\n    return data.keyMap;\r\n  };\r\n\r\n\r\n  /**\r\n   * Retrieves a child from the parent with the given key.\r\n   * @param {!Node} parent\r\n   * @param {?string=} key\r\n   * @return {?Element} The child corresponding to the key.\r\n   */\r\n  var getChild = function(parent, key) {\r\n    return getKeyMap(parent)[key];\r\n  };\r\n\r\n\r\n  /**\r\n   * Registers an element as being a child. The parent will keep track of the\r\n   * child using the key. The child can be retrieved using the same key using\r\n   * getKeyMap. The provided key should be unique within the parent Element.\r\n   * @param {!Node} parent The parent of child.\r\n   * @param {string} key A key to identify the child with.\r\n   * @param {!Node} child The child to register.\r\n   */\r\n  var registerChild = function(parent, key, child) {\r\n    getKeyMap(parent)[key] = child;\r\n  };\n\n  /** @type {?Context} */\r\n  var context = null;\r\n\r\n  /** @type {?Node} */\r\n  var currentNode;\r\n\r\n  /** @type {?Node} */\r\n  var currentParent;\r\n\r\n  /** @type {?Node} */\r\n  var previousNode;\r\n\r\n  /** @type {?Element|?DocumentFragment} */\r\n  var root;\r\n\r\n  /** @type {?Document} */\r\n  var doc;\r\n\r\n\r\n  /**\r\n   * Patches the document starting at el with the provided function. This function\r\n   * may be called during an existing patch operation.\r\n   * @param {!Element|!DocumentFragment} node The Element or Document\r\n   *     to patch.\r\n   * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\r\n   *     calls that describe the DOM.\r\n   * @param {T=} data An argument passed to fn to represent DOM state.\r\n   * @template T\r\n   */\r\n  exports.patch = function(node, fn, data) {\r\n    var prevContext = context;\r\n    var prevRoot = root;\r\n    var prevDoc = doc;\r\n    var prevCurrentNode = currentNode;\r\n    var prevCurrentParent = currentParent;\r\n    var prevPreviousNode = previousNode;\r\n\r\n    context = new Context(node);\r\n    root = node;\r\n    doc = node.ownerDocument;\r\n    currentNode = node;\r\n    currentParent = null;\r\n    previousNode = null;\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      setInAttributes(false);\r\n    }\r\n\r\n    enterNode();\r\n    fn(data);\r\n    exitNode();\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertVirtualAttributesClosed();\r\n      assertNoUnclosedTags(previousNode, node);\r\n    }\r\n\r\n    context.notifyChanges();\r\n\r\n    context = prevContext;\r\n    root = prevRoot;\r\n    doc = prevDoc;\r\n    currentNode = prevCurrentNode;\r\n    currentParent = prevCurrentParent;\r\n    previousNode = prevPreviousNode;\r\n  };\r\n\r\n\r\n  /**\r\n   * Checks whether or not the current node matches the specified nodeName and\r\n   * key.\r\n   *\r\n   * @param {?string} nodeName The nodeName for this node.\r\n   * @param {?string=} key An optional key that identifies a node.\r\n   * @return {boolean} True if the node matches, false otherwise.\r\n   */\r\n  var matches = function(nodeName, key) {\r\n    var data = getData(currentNode);\r\n\r\n    // Key check is done using double equals as we want to treat a null key the\r\n    // same as undefined. This should be okay as the only values allowed are\r\n    // strings, null and undefined so the == semantics are not too weird.\r\n    return nodeName === data.nodeName && key == data.key;\r\n  };\r\n\r\n\r\n  /**\r\n   * Aligns the virtual Element definition with the actual DOM, moving the\r\n   * corresponding DOM node to the correct location or creating it if necessary.\r\n   * @param {string} nodeName For an Element, this should be a valid tag string.\r\n   *     For a Text, this should be #text.\r\n   * @param {?string=} key The key used to identify this element.\r\n   * @param {?Array<*>=} statics For an Element, this should be an array of\r\n   *     name-value pairs.\r\n   */\r\n  var alignWithDOM = function(nodeName, key, statics) {\r\n    if (currentNode && matches(nodeName, key)) {\r\n      return;\r\n    }\r\n\r\n    var node;\r\n\r\n    // Check to see if the node has moved within the parent.\r\n    if (key) {\r\n      node = getChild(currentParent, key);\r\n      if (node && process.env.NODE_ENV !== 'production') {\r\n        assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\r\n      }\r\n    }\r\n\r\n    // Create the node if it doesn't exist.\r\n    if (!node) {\r\n      node = createNode(doc, nodeName, key, statics, currentParent);\r\n\r\n      if (key) {\r\n        registerChild(currentParent, key, node);\r\n      }\r\n\r\n      context.markCreated(node);\r\n    }\r\n\r\n    // If the node has a key, remove it from the DOM to prevent a large number\r\n    // of re-orders in the case that it moved far or was completely removed.\r\n    // Since we hold on to a reference through the keyMap, we can always add it\r\n    // back.\r\n    if (currentNode && getData(currentNode).key) {\r\n      currentParent.replaceChild(node, currentNode);\r\n      getData(currentParent).keyMapValid = false;\r\n    } else {\r\n      currentParent.insertBefore(node, currentNode);\r\n    }\r\n\r\n    currentNode = node;\r\n  };\r\n\r\n\r\n  /**\r\n   * Clears out any unvisited Nodes, as the corresponding virtual element\r\n   * functions were never called for them.\r\n   */\r\n  var clearUnvisitedDOM = function() {\r\n    var node = currentParent;\r\n    var data = getData(node);\r\n    var keyMap = data.keyMap;\r\n    var keyMapValid = data.keyMapValid;\r\n    var child = node.lastChild;\r\n    var key;\r\n\r\n    if (child === previousNode && keyMapValid) {\r\n      return;\r\n    }\r\n\r\n    if (data.attrs[exports.symbols.placeholder] && node !== root) {\r\n      return;\r\n    }\r\n\r\n    while (child !== previousNode) {\r\n      node.removeChild(child);\r\n      context.markDeleted(/** @type {!Node}*/(child));\r\n\r\n      key = getData(child).key;\r\n      if (key) {\r\n        delete keyMap[key];\r\n      }\r\n      child = node.lastChild;\r\n    }\r\n\r\n    // Clean the keyMap, removing any unusued keys.\r\n    if (!keyMapValid) {\r\n      for (key in keyMap) {\r\n        child = keyMap[key];\r\n        if (child.parentNode !== node) {\r\n          context.markDeleted(child);\r\n          delete keyMap[key];\r\n        }\r\n      }\r\n\r\n      data.keyMapValid = true;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Changes to the first child of the current node.\r\n   */\r\n  var enterNode = function() {\r\n    currentParent = currentNode;\r\n    currentNode = currentNode.firstChild;\r\n    previousNode = null;\r\n  };\r\n\r\n\r\n  /**\r\n   * Changes to the next sibling of the current node.\r\n   */\r\n  var nextNode = function() {\r\n    previousNode = currentNode;\r\n    currentNode = currentNode.nextSibling;\r\n  };\r\n\r\n\r\n  /**\r\n   * Changes to the parent of the current node, removing any unvisited children.\r\n   */\r\n  var exitNode = function() {\r\n    clearUnvisitedDOM();\r\n\r\n    previousNode = currentParent;\r\n    currentNode = currentParent.nextSibling;\r\n    currentParent = currentParent.parentNode;\r\n  };\r\n\r\n\r\n  /**\r\n   * Makes sure that the current node is an Element with a matching tagName and\r\n   * key.\r\n   *\r\n   * @param {string} tag The element's tag.\r\n   * @param {?string=} key The key used to identify this element. This can be an\r\n   *     empty string, but performance may be better if a unique value is used\r\n   *     when iterating over an array of items.\r\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n   *     static attributes for the Element. These will only be set once when the\r\n   *     Element is created.\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  var _elementOpen = function(tag, key, statics) {\r\n    alignWithDOM(tag, key, statics);\r\n    enterNode();\r\n    return /** @type {!Element} */(currentParent);\r\n  };\r\n\r\n\r\n  /**\r\n   * Closes the currently open Element, removing any unvisited children if\r\n   * necessary.\r\n   *\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  var _elementClose = function() {\r\n    exitNode();\r\n    return /** @type {!Element} */(previousNode);\r\n  };\r\n\r\n\r\n  /**\r\n   * Makes sure the current node is a Text node and creates a Text node if it is\r\n   * not.\r\n   *\r\n   * @return {!Text} The corresponding Text Node.\r\n   */\r\n  var _text = function() {\r\n    alignWithDOM('#text', null, null);\r\n    nextNode();\r\n    return /** @type {!Text} */(previousNode);\r\n  };\r\n\r\n\r\n  /**\r\n   * Gets the current Element being patched.\r\n   * @return {!Element}\r\n   */\r\n  exports.currentElement = function() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertInPatch(context);\r\n      assertNotInAttributes('currentElement');\r\n    }\r\n    return /** @type {!Element} */(currentParent);\r\n  };\r\n\r\n\r\n  /**\r\n   * Skips the children in a subtree, allowing an Element to be closed without\r\n   * clearing out the children.\r\n   */\r\n  exports.skip = function() {\r\n    previousNode = currentParent.lastChild;\r\n  };\n\n  /**\r\n   * The offset in the virtual element declaration where the attributes are\r\n   * specified.\r\n   * @const\r\n   */\r\n  var ATTRIBUTES_OFFSET = 3;\r\n\r\n\r\n  /**\r\n   * Builds an array of arguments for use with elementOpenStart, attr and\r\n   * elementOpenEnd.\r\n   * @const {Array<*>}\r\n   */\r\n  var argsBuilder = [];\r\n\r\n\r\n  /**\r\n   * @param {string} tag The element's tag.\r\n   * @param {?string=} key The key used to identify this element. This can be an\r\n   *     empty string, but performance may be better if a unique value is used\r\n   *     when iterating over an array of items.\r\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n   *     static attributes for the Element. These will only be set once when the\r\n   *     Element is created.\r\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n   *     for the Element.\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  exports.elementOpen = function(tag, key, statics, var_args) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertNotInAttributes('elementOpen');\r\n    }\r\n\r\n    var node = _elementOpen(tag, key, statics);\r\n    var data = getData(node);\r\n\r\n    /*\r\n     * Checks to see if one or more attributes have changed for a given Element.\r\n     * When no attributes have changed, this is much faster than checking each\r\n     * individual argument. When attributes have changed, the overhead of this is\r\n     * minimal.\r\n     */\r\n    var attrsArr = data.attrsArr;\r\n    var newAttrs = data.newAttrs;\r\n    var attrsChanged = false;\r\n    var i = ATTRIBUTES_OFFSET;\r\n    var j = 0;\r\n\r\n    for (; i < arguments.length; i += 1, j += 1) {\r\n      if (attrsArr[j] !== arguments[i]) {\r\n        attrsChanged = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (; i < arguments.length; i += 1, j += 1) {\r\n      attrsArr[j] = arguments[i];\r\n    }\r\n\r\n    if (j < attrsArr.length) {\r\n      attrsChanged = true;\r\n      attrsArr.length = j;\r\n    }\r\n\r\n    /*\r\n     * Actually perform the attribute update.\r\n     */\r\n    if (attrsChanged) {\r\n      for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\r\n        newAttrs[arguments[i]] = arguments[i + 1];\r\n      }\r\n\r\n      for (var attr in newAttrs) {\r\n        updateAttribute(node, attr, newAttrs[attr]);\r\n        newAttrs[attr] = undefined;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  };\r\n\r\n\r\n  /**\r\n   * Declares a virtual Element at the current location in the document. This\r\n   * corresponds to an opening tag and a elementClose tag is required. This is\r\n   * like elementOpen, but the attributes are defined using the attr function\r\n   * rather than being passed as arguments. Must be folllowed by 0 or more calls\r\n   * to attr, then a call to elementOpenEnd.\r\n   * @param {string} tag The element's tag.\r\n   * @param {?string=} key The key used to identify this element. This can be an\r\n   *     empty string, but performance may be better if a unique value is used\r\n   *     when iterating over an array of items.\r\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n   *     static attributes for the Element. These will only be set once when the\r\n   *     Element is created.\r\n   */\r\n  exports.elementOpenStart = function(tag, key, statics) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertNotInAttributes('elementOpenStart');\r\n      setInAttributes(true);\r\n    }\r\n\r\n    argsBuilder[0] = tag;\r\n    argsBuilder[1] = key;\r\n    argsBuilder[2] = statics;\r\n  };\r\n\r\n\r\n  /***\r\n   * Defines a virtual attribute at this point of the DOM. This is only valid\r\n   * when called between elementOpenStart and elementOpenEnd.\r\n   *\r\n   * @param {string} name\r\n   * @param {*} value\r\n   */\r\n  exports.attr = function(name, value) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertInAttributes('attr');\r\n    }\r\n\r\n    argsBuilder.push(name, value);\r\n  };\r\n\r\n\r\n  /**\r\n   * Closes an open tag started with elementOpenStart.\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  exports.elementOpenEnd = function() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertInAttributes('elementOpenEnd');\r\n      setInAttributes(false);\r\n    }\r\n\r\n    var node = exports.elementOpen.apply(null, argsBuilder);\r\n    argsBuilder.length = 0;\r\n    return node;\r\n  };\r\n\r\n\r\n  /**\r\n   * Closes an open virtual Element.\r\n   *\r\n   * @param {string} tag The element's tag.\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  exports.elementClose = function(tag) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertNotInAttributes('elementClose');\r\n    }\r\n\r\n    var node = _elementClose();\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertCloseMatchesOpenTag(getData(node).nodeName, tag);\r\n    }\r\n\r\n    return node;\r\n  };\r\n\r\n\r\n  /**\r\n   * Declares a virtual Element at the current location in the document that has\r\n   * no children.\r\n   * @param {string} tag The element's tag.\r\n   * @param {?string=} key The key used to identify this element. This can be an\r\n   *     empty string, but performance may be better if a unique value is used\r\n   *     when iterating over an array of items.\r\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n   *     static attributes for the Element. These will only be set once when the\r\n   *     Element is created.\r\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n   *     for the Element.\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  exports.elementVoid = function(tag, key, statics, var_args) {\r\n    var node = exports.elementOpen.apply(null, arguments);\r\n    exports.elementClose.apply(null, arguments);\r\n    return node;\r\n  };\r\n\r\n\r\n  /**\r\n   * Declares a virtual Element at the current location in the document that is a\r\n   * placeholder element. Children of this Element can be manually managed and\r\n   * will not be cleared by the library.\r\n   *\r\n   * A key must be specified to make sure that this node is correctly preserved\r\n   * across all conditionals.\r\n   *\r\n   * @param {string} tag The element's tag.\r\n   * @param {string} key The key used to identify this element.\r\n   * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n   *     static attributes for the Element. These will only be set once when the\r\n   *     Element is created.\r\n   * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n   *     for the Element.\r\n   * @return {!Element} The corresponding Element.\r\n   */\r\n  exports.elementPlaceholder = function(tag, key, statics, var_args) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertPlaceholderKeySpecified(key);\r\n    }\r\n\r\n    exports.elementOpen.apply(null, arguments);\r\n    exports.skip();\r\n    return exports.elementClose.apply(null, arguments);\r\n  };\r\n\r\n\r\n  /**\r\n   * Declares a virtual Text at this point in the document.\r\n   *\r\n   * @param {string|number|boolean} value The value of the Text.\r\n   * @param {...(function((string|number|boolean)):string)} var_args\r\n   *     Functions to format the value which are called only when the value has\r\n   *     changed.\r\n   * @return {!Text} The corresponding text node.\r\n   */\r\n  exports.text = function(value, var_args) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      assertNotInAttributes('text');\r\n    }\r\n\r\n    var node = _text();\r\n    var data = getData(node);\r\n\r\n    if (data.text !== value) {\r\n      data.text = /** @type {string} */(value);\r\n\r\n      var formatted = value;\r\n      for (var i = 1; i < arguments.length; i += 1) {\r\n        formatted = arguments[i](formatted);\r\n      }\r\n\r\n      node.data = formatted;\r\n    }\r\n\r\n    return node;\r\n  };\n\n}));\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { notifications } from './notifications';\r\n\r\n\r\n/**\r\n * Keeps track of the state of a patch.\r\n * @constructor\r\n */\r\nfunction Context() {\r\n  /**\r\n   * @type {(Array<!Node>|undefined)}\r\n   */\r\n  this.created = notifications.nodesCreated && [];\r\n\r\n  /**\r\n   * @type {(Array<!Node>|undefined)}\r\n   */\r\n  this.deleted = notifications.nodesDeleted && [];\r\n}\r\n\r\n\r\n/**\r\n * @param {!Node} node\r\n */\r\nContext.prototype.markCreated = function(node) {\r\n  if (this.created) {\r\n    this.created.push(node);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @param {!Node} node\r\n */\r\nContext.prototype.markDeleted = function(node) {\r\n  if (this.deleted) {\r\n    this.deleted.push(node);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Notifies about nodes that were created during the patch opearation.\r\n */\r\nContext.prototype.notifyChanges = function() {\r\n  if (this.created && this.created.length > 0) {\r\n    notifications.nodesCreated(this.created);\r\n  }\r\n\r\n  if (this.deleted && this.deleted.length > 0) {\r\n    notifications.nodesDeleted(this.deleted);\r\n  }\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  Context\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { createMap } from './util';\r\n\r\n\r\n/**\r\n * Keeps track of information needed to perform diffs for a given DOM node.\r\n * @param {!string} nodeName\r\n * @param {?string=} key\r\n * @constructor\r\n */\r\nfunction NodeData(nodeName, key) {\r\n  /**\r\n   * The attributes and their values.\r\n   * @const\r\n   */\r\n  this.attrs = createMap();\r\n\r\n  /**\r\n   * An array of attribute name/value pairs, used for quickly diffing the\r\n   * incomming attributes to see if the DOM node's attributes need to be\r\n   * updated.\r\n   * @const {Array<*>}\r\n   */\r\n  this.attrsArr = [];\r\n\r\n  /**\r\n   * The incoming attributes for this Node, before they are updated.\r\n   * @const {!Object<string, *>}\r\n   */\r\n  this.newAttrs = createMap();\r\n\r\n  /**\r\n   * The key used to identify this node, used to preserve DOM nodes when they\r\n   * move within their parent.\r\n   * @const\r\n   */\r\n  this.key = key;\r\n\r\n  /**\r\n   * Keeps track of children within this node by their key.\r\n   * {?Object<string, !Element>}\r\n   */\r\n  this.keyMap = null;\r\n\r\n  /**\r\n   * Whether or not the keyMap is currently valid.\r\n   * {boolean}\r\n   */\r\n  this.keyMapValid = true;\r\n\r\n  /**\r\n   * The node name for this node.\r\n   * @const {string}\r\n   */\r\n  this.nodeName = nodeName;\r\n\r\n  /**\r\n   * @type {?string}\r\n   */\r\n  this.text = null;\r\n}\r\n\r\n\r\n/**\r\n * Initializes a NodeData object for a Node.\r\n *\r\n * @param {Node} node The node to initialize data for.\r\n * @param {string} nodeName The node name of node.\r\n * @param {?string=} key The key that identifies the node.\r\n * @return {!NodeData} The newly initialized data object\r\n */\r\nvar initData = function(node, nodeName, key) {\r\n  var data = new NodeData(nodeName, key);\r\n  node['__incrementalDOMData'] = data;\r\n  return data;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves the NodeData object for a Node, creating it if necessary.\r\n *\r\n * @param {Node} node The node to retrieve the data for.\r\n * @return {!NodeData} The NodeData for this Node.\r\n */\r\nvar getData = function(node) {\r\n  var data = node['__incrementalDOMData'];\r\n\r\n  if (!data) {\r\n    var nodeName = node.nodeName.toLowerCase();\r\n    var key = null;\r\n\r\n    if (node instanceof Element) {\r\n      key = node.getAttribute('key');\r\n    }\r\n\r\n    data = initData(node, nodeName, key);\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  getData,\r\n  initData\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** */\r\nvar notifications = {\r\n  /**\r\n   * Called after patch has compleated with any Nodes that have been created\r\n   * and added to the DOM.\r\n   * @type {?function(Array<!Node>)}\r\n   */\r\n  nodesCreated: null,\r\n\r\n  /**\r\n   * Called after patch has compleated with any Nodes that have been removed\r\n   * from the DOM.\r\n   * Note it's an applications responsibility to handle any childNodes.\r\n   * @type {?function(Array<!Node>)}\r\n   */\r\n  nodesDeleted: null\r\n};\r\n\r\nexport {\r\n  notifications\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/**\r\n * A cached reference to the hasOwnProperty function.\r\n */\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n\r\n/**\r\n * A cached reference to the create function.\r\n */\r\nvar create = Object.create;\r\n\r\n\r\n/**\r\n * Used to prevent property collisions between our \"map\" and its prototype.\r\n * @param {!Object<string, *>} map The map to check.\r\n * @param {string} property The property to check.\r\n * @return {boolean} Whether map has property.\r\n */\r\nvar has = function(map, property) {\r\n  return hasOwnProperty.call(map, property);\r\n};\r\n\r\n\r\n/**\r\n * Creates an map object without a prototype.\r\n * @return {!Object}\r\n */\r\nvar createMap = function() {\r\n  return create(null);\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  createMap,\r\n  has\r\n};\r\n\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar symbols = {\r\n  default: '__default',\r\n\r\n  placeholder: '__placeholder'\r\n};\r\n\r\n/** */\r\nexport {\r\n  symbols\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { getData } from './node_data';\r\nimport { symbols } from './symbols';\r\nimport {\r\n  createMap,\r\n  has\r\n} from './util';\r\n\r\n\r\n/**\r\n * Applies an attribute or property to a given Element. If the value is null\r\n * or undefined, it is removed from the Element. Otherwise, the value is set\r\n * as an attribute.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {?(boolean|number|string)=} value The attribute's value.\r\n */\r\nvar applyAttr = function(el, name, value) {\r\n  if (value == null) {\r\n    el.removeAttribute(name);\r\n  } else {\r\n    el.setAttribute(name, value);\r\n  }\r\n};\r\n\r\n/**\r\n * Applies a property to a given Element.\r\n * @param {!Element} el\r\n * @param {string} name The property's name.\r\n * @param {*} value The property's value.\r\n */\r\nvar applyProp = function(el, name, value) {\r\n  el[name] = value;\r\n};\r\n\r\n\r\n/**\r\n * Applies a style to an Element. No vendor prefix expansion is done for\r\n * property names/values.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {string|Object<string,string>} style The style to set. Either a\r\n *     string of css or an object containing property-value pairs.\r\n */\r\nvar applyStyle = function(el, name, style) {\r\n  if (typeof style === 'string') {\r\n    el.style.cssText = style;\r\n  } else {\r\n    el.style.cssText = '';\r\n    var elStyle = el.style;\r\n\r\n    for (var prop in style) {\r\n      if (has(style, prop)) {\r\n        elStyle[prop] = style[prop];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Updates a single attribute on an Element.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {*} value The attribute's value. If the value is an object or\r\n *     function it is set on the Element, otherwise, it is set as an HTML\r\n *     attribute.\r\n */\r\nvar applyAttributeTyped = function(el, name, value) {\r\n  var type = typeof value;\r\n\r\n  if (type === 'object' || type === 'function') {\r\n    applyProp(el, name, value);\r\n  } else {\r\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Calls the appropriate attribute mutator for this attribute.\r\n * @param {!Element} el\r\n * @param {string} name The attribute's name.\r\n * @param {*} value The attribute's value.\r\n */\r\nvar updateAttribute = function(el, name, value) {\r\n  var data = getData(el);\r\n  var attrs = data.attrs;\r\n\r\n  if (attrs[name] === value) {\r\n    return;\r\n  }\r\n\r\n  var mutator = attributes[name] || attributes[symbols.default];\r\n  mutator(el, name, value);\r\n\r\n  attrs[name] = value;\r\n};\r\n\r\n\r\n/**\r\n * A publicly mutable object to provide custom mutators for attributes.\r\n * @const {!Object<string, function(!Element, string, *)>}\r\n */\r\nvar attributes = createMap();\r\n\r\n// Special generic mutator that's called for any attribute that does not\r\n// have a specific mutator.\r\nattributes[symbols.default] = applyAttributeTyped;\r\n\r\nattributes[symbols.placeholder] = function() {};\r\n\r\nattributes['style'] = applyStyle;\r\n\r\n\r\n/** */\r\nexport {\r\n  updateAttribute,\r\n  applyProp,\r\n  applyAttr,\r\n  attributes\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { updateAttribute } from './attributes';\r\nimport {\r\n    getData,\r\n    initData\r\n} from './node_data';\r\nimport { createMap } from './util';\r\n\r\n\r\n/**\r\n * Gets the namespace to create an element (of a given tag) in.\r\n * @param {string} tag The tag to get the namespace for.\r\n * @param {!Node} parent\r\n * @return {?string} The namespace to create the tag in.\r\n */\r\nvar getNamespaceForTag = function(tag, parent) {\r\n  if (tag === 'svg') {\r\n    return 'http://www.w3.org/2000/svg';\r\n  }\r\n\r\n  if (getData(parent).nodeName === 'foreignObject') {\r\n    return null;\r\n  }\r\n\r\n  return parent.namespaceURI;\r\n};\r\n\r\n\r\n/**\r\n * Creates an Element.\r\n * @param {Document} doc The document with which to create the Element.\r\n * @param {string} tag The tag for the Element.\r\n * @param {?string=} key A key to identify the Element.\r\n * @param {!Node} parent\r\n * @return {!Element}\r\n */\r\nvar createElement = function(doc, tag, key, parent) {\r\n  var namespace = getNamespaceForTag(tag, parent);\r\n  var el;\r\n\r\n  if (namespace) {\r\n    el = doc.createElementNS(namespace, tag);\r\n  } else {\r\n    el = doc.createElement(tag);\r\n  }\r\n\r\n  return el;\r\n};\r\n\r\n\r\n/**\r\n * Creates a Node, either a Text or an Element depending on the node name\r\n * provided.\r\n * @param {Document} doc The document with which to create the Node.\r\n * @param {string} nodeName The tag if creating an element or #text to create\r\n *     a Text.\r\n * @param {?string=} key A key to identify the Element.\r\n * @param {?Array<*>=} statics The static data to initialize the Node\r\n *     with. For an Element, an array of attribute name/value pairs of\r\n *     the static attributes for the Element.\r\n * @param {!Node} parent\r\n * @return {!Node}\r\n */\r\nvar createNode = function(doc, nodeName, key, statics, parent) {\r\n  var node;\r\n  if (nodeName === '#text') {\r\n    node = doc.createTextNode('');\r\n  } else {\r\n    node = createElement(doc, nodeName, key, parent);\r\n  }\r\n\r\n  initData(node, nodeName, key);\r\n\r\n  if (statics) {\r\n    for (var i = 0; i < statics.length; i += 2) {\r\n      updateAttribute(/** @type {!Element}*/(node),\r\n                      /** @type {!string}*/(statics[i]),\r\n                      statics[i + 1]);\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Creates a mapping that can be used to look up children using a key.\r\n * @param {!Node} el\r\n * @return {!Object<string, !Element>} A mapping of keys to the children of the\r\n *     Element.\r\n */\r\nvar createKeyMap = function(el) {\r\n  var map = createMap();\r\n  var children = el.children;\r\n  var count = children.length;\r\n\r\n  for (var i = 0; i < count; i += 1) {\r\n    var child = children[i];\r\n    var key = getData(child).key;\r\n\r\n    if (key) {\r\n      map[key] = child;\r\n    }\r\n  }\r\n\r\n  return map;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves the mapping of key to child node for a given Element, creating it\r\n * if necessary.\r\n * @param {!Node} el\r\n * @return {!Object<string, !Node>} A mapping of keys to child Elements\r\n */\r\nvar getKeyMap = function(el) {\r\n  var data = getData(el);\r\n\r\n  if (!data.keyMap) {\r\n    data.keyMap = createKeyMap(el);\r\n  }\r\n\r\n  return data.keyMap;\r\n};\r\n\r\n\r\n/**\r\n * Retrieves a child from the parent with the given key.\r\n * @param {!Node} parent\r\n * @param {?string=} key\r\n * @return {?Element} The child corresponding to the key.\r\n */\r\nvar getChild = function(parent, key) {\r\n  return getKeyMap(parent)[key];\r\n};\r\n\r\n\r\n/**\r\n * Registers an element as being a child. The parent will keep track of the\r\n * child using the key. The child can be retrieved using the same key using\r\n * getKeyMap. The provided key should be unique within the parent Element.\r\n * @param {!Node} parent The parent of child.\r\n * @param {string} key A key to identify the child with.\r\n * @param {!Node} child The child to register.\r\n */\r\nvar registerChild = function(parent, key, child) {\r\n  getKeyMap(parent)[key] = child;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  createNode,\r\n  getChild,\r\n  registerChild\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {\r\n  createNode,\r\n  getChild,\r\n  registerChild\r\n} from './nodes';\r\nimport { getData } from './node_data';\r\nimport { Context } from './context';\r\nimport { symbols } from './symbols';\r\nimport {\r\n  assertInPatch,\r\n  assertKeyedTagMatches,\r\n  assertNoUnclosedTags,\r\n  assertNotInAttributes,\r\n  assertVirtualAttributesClosed,\r\n  setInAttributes\r\n} from './assertions';\r\nimport { notifications } from './notifications';\r\n\r\n\r\n/** @type {?Context} */\r\nvar context = null;\r\n\r\n/** @type {?Node} */\r\nvar currentNode;\r\n\r\n/** @type {?Node} */\r\nvar currentParent;\r\n\r\n/** @type {?Node} */\r\nvar previousNode;\r\n\r\n/** @type {?Element|?DocumentFragment} */\r\nvar root;\r\n\r\n/** @type {?Document} */\r\nvar doc;\r\n\r\n\r\n/**\r\n * Patches the document starting at el with the provided function. This function\r\n * may be called during an existing patch operation.\r\n * @param {!Element|!DocumentFragment} node The Element or Document\r\n *     to patch.\r\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\r\n *     calls that describe the DOM.\r\n * @param {T=} data An argument passed to fn to represent DOM state.\r\n * @template T\r\n */\r\nvar patch = function(node, fn, data) {\r\n  var prevContext = context;\r\n  var prevRoot = root;\r\n  var prevDoc = doc;\r\n  var prevCurrentNode = currentNode;\r\n  var prevCurrentParent = currentParent;\r\n  var prevPreviousNode = previousNode;\r\n\r\n  context = new Context(node);\r\n  root = node;\r\n  doc = node.ownerDocument;\r\n  currentNode = node;\r\n  currentParent = null;\r\n  previousNode = null;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    setInAttributes(false);\r\n  }\r\n\r\n  enterNode();\r\n  fn(data);\r\n  exitNode();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertVirtualAttributesClosed();\r\n    assertNoUnclosedTags(previousNode, node);\r\n  }\r\n\r\n  context.notifyChanges();\r\n\r\n  context = prevContext;\r\n  root = prevRoot;\r\n  doc = prevDoc;\r\n  currentNode = prevCurrentNode;\r\n  currentParent = prevCurrentParent;\r\n  previousNode = prevPreviousNode;\r\n};\r\n\r\n\r\n/**\r\n * Checks whether or not the current node matches the specified nodeName and\r\n * key.\r\n *\r\n * @param {?string} nodeName The nodeName for this node.\r\n * @param {?string=} key An optional key that identifies a node.\r\n * @return {boolean} True if the node matches, false otherwise.\r\n */\r\nvar matches = function(nodeName, key) {\r\n  var data = getData(currentNode);\r\n\r\n  // Key check is done using double equals as we want to treat a null key the\r\n  // same as undefined. This should be okay as the only values allowed are\r\n  // strings, null and undefined so the == semantics are not too weird.\r\n  return nodeName === data.nodeName && key == data.key;\r\n};\r\n\r\n\r\n/**\r\n * Aligns the virtual Element definition with the actual DOM, moving the\r\n * corresponding DOM node to the correct location or creating it if necessary.\r\n * @param {string} nodeName For an Element, this should be a valid tag string.\r\n *     For a Text, this should be #text.\r\n * @param {?string=} key The key used to identify this element.\r\n * @param {?Array<*>=} statics For an Element, this should be an array of\r\n *     name-value pairs.\r\n */\r\nvar alignWithDOM = function(nodeName, key, statics) {\r\n  if (currentNode && matches(nodeName, key)) {\r\n    return;\r\n  }\r\n\r\n  var node;\r\n\r\n  // Check to see if the node has moved within the parent.\r\n  if (key) {\r\n    node = getChild(currentParent, key);\r\n    if (node && process.env.NODE_ENV !== 'production') {\r\n      assertKeyedTagMatches(getData(node).nodeName, nodeName, key);\r\n    }\r\n  }\r\n\r\n  // Create the node if it doesn't exist.\r\n  if (!node) {\r\n    node = createNode(doc, nodeName, key, statics, currentParent);\r\n\r\n    if (key) {\r\n      registerChild(currentParent, key, node);\r\n    }\r\n\r\n    context.markCreated(node);\r\n  }\r\n\r\n  // If the node has a key, remove it from the DOM to prevent a large number\r\n  // of re-orders in the case that it moved far or was completely removed.\r\n  // Since we hold on to a reference through the keyMap, we can always add it\r\n  // back.\r\n  if (currentNode && getData(currentNode).key) {\r\n    currentParent.replaceChild(node, currentNode);\r\n    getData(currentParent).keyMapValid = false;\r\n  } else {\r\n    currentParent.insertBefore(node, currentNode);\r\n  }\r\n\r\n  currentNode = node;\r\n};\r\n\r\n\r\n/**\r\n * Clears out any unvisited Nodes, as the corresponding virtual element\r\n * functions were never called for them.\r\n */\r\nvar clearUnvisitedDOM = function() {\r\n  var node = currentParent;\r\n  var data = getData(node);\r\n  var keyMap = data.keyMap;\r\n  var keyMapValid = data.keyMapValid;\r\n  var child = node.lastChild;\r\n  var key;\r\n\r\n  if (child === previousNode && keyMapValid) {\r\n    return;\r\n  }\r\n\r\n  if (data.attrs[symbols.placeholder] && node !== root) {\r\n    return;\r\n  }\r\n\r\n  while (child !== previousNode) {\r\n    node.removeChild(child);\r\n    context.markDeleted(/** @type {!Node}*/(child));\r\n\r\n    key = getData(child).key;\r\n    if (key) {\r\n      delete keyMap[key];\r\n    }\r\n    child = node.lastChild;\r\n  }\r\n\r\n  // Clean the keyMap, removing any unusued keys.\r\n  if (!keyMapValid) {\r\n    for (key in keyMap) {\r\n      child = keyMap[key];\r\n      if (child.parentNode !== node) {\r\n        context.markDeleted(child);\r\n        delete keyMap[key];\r\n      }\r\n    }\r\n\r\n    data.keyMapValid = true;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Changes to the first child of the current node.\r\n */\r\nvar enterNode = function() {\r\n  currentParent = currentNode;\r\n  currentNode = currentNode.firstChild;\r\n  previousNode = null;\r\n};\r\n\r\n\r\n/**\r\n * Changes to the next sibling of the current node.\r\n */\r\nvar nextNode = function() {\r\n  previousNode = currentNode;\r\n  currentNode = currentNode.nextSibling;\r\n};\r\n\r\n\r\n/**\r\n * Changes to the parent of the current node, removing any unvisited children.\r\n */\r\nvar exitNode = function() {\r\n  clearUnvisitedDOM();\r\n\r\n  previousNode = currentParent;\r\n  currentNode = currentParent.nextSibling;\r\n  currentParent = currentParent.parentNode;\r\n};\r\n\r\n\r\n/**\r\n * Makes sure that the current node is an Element with a matching tagName and\r\n * key.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementOpen = function(tag, key, statics) {\r\n  alignWithDOM(tag, key, statics);\r\n  enterNode();\r\n  return /** @type {!Element} */(currentParent);\r\n};\r\n\r\n\r\n/**\r\n * Closes the currently open Element, removing any unvisited children if\r\n * necessary.\r\n *\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementClose = function() {\r\n  exitNode();\r\n  return /** @type {!Element} */(previousNode);\r\n};\r\n\r\n\r\n/**\r\n * Makes sure the current node is a Text node and creates a Text node if it is\r\n * not.\r\n *\r\n * @return {!Text} The corresponding Text Node.\r\n */\r\nvar text = function() {\r\n  alignWithDOM('#text', null, null);\r\n  nextNode();\r\n  return /** @type {!Text} */(previousNode);\r\n};\r\n\r\n\r\n/**\r\n * Gets the current Element being patched.\r\n * @return {!Element}\r\n */\r\nvar currentElement = function() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInPatch(context);\r\n    assertNotInAttributes('currentElement');\r\n  }\r\n  return /** @type {!Element} */(currentParent);\r\n};\r\n\r\n\r\n/**\r\n * Skips the children in a subtree, allowing an Element to be closed without\r\n * clearing out the children.\r\n */\r\nvar skip = function() {\r\n  previousNode = currentParent.lastChild;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  elementOpen,\r\n  elementClose,\r\n  text,\r\n  patch,\r\n  currentElement,\r\n  skip\r\n};\r\n","/**\r\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {\r\n  elementOpen as coreElementOpen,\r\n  elementClose as coreElementClose,\r\n  text as coreText,\r\n  currentElement,\r\n  skip\r\n} from './core';\r\nimport { updateAttribute } from './attributes';\r\nimport { getData } from './node_data';\r\nimport { symbols } from './symbols';\r\nimport {\r\n  assertNotInAttributes,\r\n  assertInAttributes,\r\n  assertPlaceholderKeySpecified,\r\n  assertCloseMatchesOpenTag,\r\n  setInAttributes\r\n} from './assertions';\r\n\r\n\r\n/**\r\n * The offset in the virtual element declaration where the attributes are\r\n * specified.\r\n * @const\r\n */\r\nvar ATTRIBUTES_OFFSET = 3;\r\n\r\n\r\n/**\r\n * Builds an array of arguments for use with elementOpenStart, attr and\r\n * elementOpenEnd.\r\n * @const {Array<*>}\r\n */\r\nvar argsBuilder = [];\r\n\r\n\r\n/**\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementOpen = function(tag, key, statics, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementOpen');\r\n  }\r\n\r\n  var node = coreElementOpen(tag, key, statics);\r\n  var data = getData(node);\r\n\r\n  /*\r\n   * Checks to see if one or more attributes have changed for a given Element.\r\n   * When no attributes have changed, this is much faster than checking each\r\n   * individual argument. When attributes have changed, the overhead of this is\r\n   * minimal.\r\n   */\r\n  var attrsArr = data.attrsArr;\r\n  var newAttrs = data.newAttrs;\r\n  var attrsChanged = false;\r\n  var i = ATTRIBUTES_OFFSET;\r\n  var j = 0;\r\n\r\n  for (; i < arguments.length; i += 1, j += 1) {\r\n    if (attrsArr[j] !== arguments[i]) {\r\n      attrsChanged = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  for (; i < arguments.length; i += 1, j += 1) {\r\n    attrsArr[j] = arguments[i];\r\n  }\r\n\r\n  if (j < attrsArr.length) {\r\n    attrsChanged = true;\r\n    attrsArr.length = j;\r\n  }\r\n\r\n  /*\r\n   * Actually perform the attribute update.\r\n   */\r\n  if (attrsChanged) {\r\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\r\n      newAttrs[arguments[i]] = arguments[i + 1];\r\n    }\r\n\r\n    for (var attr in newAttrs) {\r\n      updateAttribute(node, attr, newAttrs[attr]);\r\n      newAttrs[attr] = undefined;\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document. This\r\n * corresponds to an opening tag and a elementClose tag is required. This is\r\n * like elementOpen, but the attributes are defined using the attr function\r\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\r\n * to attr, then a call to elementOpenEnd.\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n */\r\nvar elementOpenStart = function(tag, key, statics) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementOpenStart');\r\n    setInAttributes(true);\r\n  }\r\n\r\n  argsBuilder[0] = tag;\r\n  argsBuilder[1] = key;\r\n  argsBuilder[2] = statics;\r\n};\r\n\r\n\r\n/***\r\n * Defines a virtual attribute at this point of the DOM. This is only valid\r\n * when called between elementOpenStart and elementOpenEnd.\r\n *\r\n * @param {string} name\r\n * @param {*} value\r\n */\r\nvar attr = function(name, value) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInAttributes('attr');\r\n  }\r\n\r\n  argsBuilder.push(name, value);\r\n};\r\n\r\n\r\n/**\r\n * Closes an open tag started with elementOpenStart.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementOpenEnd = function() {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertInAttributes('elementOpenEnd');\r\n    setInAttributes(false);\r\n  }\r\n\r\n  var node = elementOpen.apply(null, argsBuilder);\r\n  argsBuilder.length = 0;\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Closes an open virtual Element.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementClose = function(tag) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('elementClose');\r\n  }\r\n\r\n  var node = coreElementClose();\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document that has\r\n * no children.\r\n * @param {string} tag The element's tag.\r\n * @param {?string=} key The key used to identify this element. This can be an\r\n *     empty string, but performance may be better if a unique value is used\r\n *     when iterating over an array of items.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementVoid = function(tag, key, statics, var_args) {\r\n  var node = elementOpen.apply(null, arguments);\r\n  elementClose.apply(null, arguments);\r\n  return node;\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Element at the current location in the document that is a\r\n * placeholder element. Children of this Element can be manually managed and\r\n * will not be cleared by the library.\r\n *\r\n * A key must be specified to make sure that this node is correctly preserved\r\n * across all conditionals.\r\n *\r\n * @param {string} tag The element's tag.\r\n * @param {string} key The key used to identify this element.\r\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\r\n *     static attributes for the Element. These will only be set once when the\r\n *     Element is created.\r\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\r\n *     for the Element.\r\n * @return {!Element} The corresponding Element.\r\n */\r\nvar elementPlaceholder = function(tag, key, statics, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertPlaceholderKeySpecified(key);\r\n  }\r\n\r\n  elementOpen.apply(null, arguments);\r\n  skip();\r\n  return elementClose.apply(null, arguments);\r\n};\r\n\r\n\r\n/**\r\n * Declares a virtual Text at this point in the document.\r\n *\r\n * @param {string|number|boolean} value The value of the Text.\r\n * @param {...(function((string|number|boolean)):string)} var_args\r\n *     Functions to format the value which are called only when the value has\r\n *     changed.\r\n * @return {!Text} The corresponding text node.\r\n */\r\nvar text = function(value, var_args) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertNotInAttributes('text');\r\n  }\r\n\r\n  var node = coreText();\r\n  var data = getData(node);\r\n\r\n  if (data.text !== value) {\r\n    data.text = /** @type {string} */(value);\r\n\r\n    var formatted = value;\r\n    for (var i = 1; i < arguments.length; i += 1) {\r\n      formatted = arguments[i](formatted);\r\n    }\r\n\r\n    node.data = formatted;\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n\r\n/** */\r\nexport {\r\n  elementOpenStart,\r\n  elementOpenEnd,\r\n  elementOpen,\r\n  elementVoid,\r\n  elementClose,\r\n  elementPlaceholder,\r\n  text,\r\n  attr\r\n};\r\n"],"sourceRoot":"/source/"}